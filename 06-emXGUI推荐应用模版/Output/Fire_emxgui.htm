<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\..\Output\Fire_emxgui.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\..\Output\Fire_emxgui.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Thu Mar 21 11:54:16 2019
<BR><P>
<H3>Maximum Stack Usage =      18692 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
win_proc &rArr; App_FLASH_Writer &rArr; BurnFile &rArr; Make_Catalog &rArr;  Make_Catalog (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[82]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[82]">ADC3_IRQHandler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[1db]">_SetWindowClipFlag</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1db]">_SetWindowClipFlag</a><BR>
 <LI><a href="#[218]">GUI_PaintHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[218]">GUI_PaintHandler</a><BR>
 <LI><a href="#[357]">_RedrawWindow</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[357]">_RedrawWindow</a><BR>
 <LI><a href="#[380]">_SendMessage_WM_SIZE_AllChild</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[380]">_SendMessage_WM_SIZE_AllChild</a><BR>
 <LI><a href="#[37f]">_SendMessage_WM_MOVE_AllChild</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37f]">_SendMessage_WM_MOVE_AllChild</a><BR>
 <LI><a href="#[37c]">_OffsetWindowRect</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37c]">_OffsetWindowRect</a><BR>
 <LI><a href="#[4]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemManage_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
 <LI><a href="#[2a1]">_GetWindowFromPoint</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a1]">_GetWindowFromPoint</a><BR>
 <LI><a href="#[3a8]">color_tree_cleanup</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a8]">color_tree_cleanup</a><BR>
 <LI><a href="#[1ec]">DestroyWindow</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ec]">DestroyWindow</a><BR>
 <LI><a href="#[1ad]">Make_Catalog</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ad]">Make_Catalog</a><BR>
 <LI><a href="#[3f4]">putc_bfd</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f4]">putc_bfd</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[ed]">AA_gdHLine</a> from gui_aa_core.o(i.AA_gdHLine) referenced from gui_aa_core.o(i.GUI_AA_Begin)
 <LI><a href="#[82]">ADC3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1d]">ADC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[10a]">ARGB4444_GetARGB</a> from surface_argb4444.o(i.ARGB4444_GetARGB) referenced from surface_argb4444.o(.constdata)
 <LI><a href="#[109]">ARGB4444_GetRGB</a> from surface_argb4444.o(i.ARGB4444_GetRGB) referenced from surface_argb4444.o(.constdata)
 <LI><a href="#[108]">ARGB4444_MapARGB</a> from surface_argb4444.o(i.ARGB4444_MapARGB) referenced from surface_argb4444.o(.constdata)
 <LI><a href="#[101]">ARGB4444_MapARGB1555</a> from surface_argb4444.o(i.ARGB4444_MapARGB1555) referenced from surface_argb4444.o(.constdata)
 <LI><a href="#[103]">ARGB4444_MapARGB4444</a> from surface_argb4444.o(i.ARGB4444_MapARGB4444) referenced from surface_argb4444.o(.constdata)
 <LI><a href="#[105]">ARGB4444_MapARGB8888</a> from surface_argb4444.o(i.ARGB4444_MapARGB8888) referenced from surface_argb4444.o(.constdata)
 <LI><a href="#[107]">ARGB4444_MapRGB</a> from surface_argb4444.o(i.ARGB4444_MapRGB) referenced from surface_argb4444.o(.constdata)
 <LI><a href="#[fe]">ARGB4444_MapRGB332</a> from surface_argb4444.o(i.ARGB4444_MapRGB332) referenced from surface_argb4444.o(.constdata)
 <LI><a href="#[ff]">ARGB4444_MapRGB565</a> from surface_argb4444.o(i.ARGB4444_MapRGB565) referenced from surface_argb4444.o(.constdata)
 <LI><a href="#[100]">ARGB4444_MapXRGB1555</a> from surface_argb4444.o(i.ARGB4444_MapXRGB1555) referenced from surface_argb4444.o(.constdata)
 <LI><a href="#[102]">ARGB4444_MapXRGB4444</a> from surface_argb4444.o(i.ARGB4444_MapXRGB4444) referenced from surface_argb4444.o(.constdata)
 <LI><a href="#[104]">ARGB4444_MapXRGB8888</a> from surface_argb4444.o(i.ARGB4444_MapXRGB8888) referenced from surface_argb4444.o(.constdata)
 <LI><a href="#[106]">ARGB4444_ToARGB</a> from surface_argb4444.o(i.ARGB4444_ToARGB) referenced from surface_argb4444.o(.constdata)
 <LI><a href="#[98]">App_FLASH_Writer</a> from gui_res_writer_dialog.o(i.App_FLASH_Writer) referenced from gui_res_writer_dialog.o(i.App_FLASH_Writer)
 <LI><a href="#[99]">App_Load_Res</a> from gui_bootinterface.o(i.App_Load_Res) referenced from gui_bootinterface.o(i.App_Load_Res)
 <LI><a href="#[84]">BDMA_Channel0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[85]">BDMA_Channel1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[86]">BDMA_Channel2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[87]">BDMA_Channel3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[88]">BDMA_Channel4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[89]">BDMA_Channel5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8a]">BDMA_Channel6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8b]">BDMA_Channel7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from stm32h7xx_it.o(i.BusFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[63]">CEC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8c]">COMP1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[92]">CRS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[54]">DCMI_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[73]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[74]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[75]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[76]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5f]">DMA2D_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6b]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[83]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from stm32h7xx_it.o(i.DebugMon_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[33]">EXTI15_10_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from bsp_touch_gtxx.o(i.EXTI3_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[22]">EXTI9_5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1e]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[20]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1f]">FDCAN2_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[21]">FDCAN2_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[49]">FDCAN_CAL_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[56]">FPU_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a3]">GL16_FillRectARGB</a> from gl_mem_16bpp.o(i.GL16_FillRectARGB) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[9f]">GL16_SetPixel_ARGB</a> from gl_mem_16bpp.o(i.GL16_SetPixel_ARGB) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[a4]">GL16_copy_bits</a> from gl_mem_16bpp.o(i.GL16_copy_bits) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[b1]">GL16_draw_bitmap_AL1</a> from gl_mem_16bpp.o(i.GL16_draw_bitmap_AL1) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[b2]">GL16_draw_bitmap_AL2</a> from gl_mem_16bpp.o(i.GL16_draw_bitmap_AL2) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[b3]">GL16_draw_bitmap_AL4</a> from gl_mem_16bpp.o(i.GL16_draw_bitmap_AL4) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[b4]">GL16_draw_bitmap_AL8</a> from gl_mem_16bpp.o(i.GL16_draw_bitmap_AL8) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[ac]">GL16_draw_bitmap_ARGB1555</a> from gl_mem_16bpp.o(i.GL16_draw_bitmap_ARGB1555) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[ad]">GL16_draw_bitmap_ARGB4444</a> from gl_mem_16bpp.o(i.GL16_draw_bitmap_ARGB4444) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[b0]">GL16_draw_bitmap_ARGB8888</a> from gl_mem_16bpp.o(i.GL16_draw_bitmap_ARGB8888) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[a5]">GL16_draw_bitmap_LUT1</a> from gl_mem_16bpp.o(i.GL16_draw_bitmap_LUT1) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[a6]">GL16_draw_bitmap_LUT2</a> from gl_mem_16bpp.o(i.GL16_draw_bitmap_LUT2) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[a7]">GL16_draw_bitmap_LUT4</a> from gl_mem_16bpp.o(i.GL16_draw_bitmap_LUT4) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[a8]">GL16_draw_bitmap_LUT8</a> from gl_mem_16bpp.o(i.GL16_draw_bitmap_LUT8) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[a9]">GL16_draw_bitmap_RGB332</a> from gl_mem_16bpp.o(i.GL16_draw_bitmap_RGB332) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[aa]">GL16_draw_bitmap_RGB565</a> from gl_mem_16bpp.o(i.GL16_draw_bitmap_RGB565) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[ae]">GL16_draw_bitmap_RGB888</a> from gl_mem_16bpp.o(i.GL16_draw_bitmap_RGB888) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[ab]">GL16_draw_bitmap_XRGB1555</a> from gl_mem_16bpp.o(i.GL16_draw_bitmap_XRGB1555) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[af]">GL16_draw_bitmap_XRGB8888</a> from gl_mem_16bpp.o(i.GL16_draw_bitmap_XRGB8888) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[a0]">GL16_draw_hline</a> from gl_mem_16bpp.o(i.GL16_draw_hline) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[a1]">GL16_draw_vline</a> from gl_mem_16bpp.o(i.GL16_draw_vline) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[a2]">GL16_fill_rect</a> from gl_mem_16bpp.o(i.GL16_fill_rect) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[9d]">GL16_get_pixel</a> from gl_mem_16bpp.o(i.GL16_get_pixel) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[b6]">GL16_rotate_bitmap</a> from gl_mem_16bpp.o(i.GL16_rotate_bitmap) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[b5]">GL16_scale_bitmap</a> from gl_mem_16bpp.o(i.GL16_scale_bitmap) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[9b]">GL16_set_addr</a> from gl_mem_16bpp.o(i.GL16_set_addr) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[9c]">GL16_set_pixel</a> from gl_mem_16bpp.o(i.GL16_set_pixel) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[9e]">GL16_xor_pixel</a> from gl_mem_16bpp.o(i.GL16_xor_pixel) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[bf]">GL32_FillRectARGB</a> from gl_mem_32bpp.o(i.GL32_FillRectARGB) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[bb]">GL32_SetPixel_ARGB</a> from gl_mem_32bpp.o(i.GL32_SetPixel_ARGB) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[c0]">GL32_copy_bits</a> from gl_mem_32bpp.o(i.GL32_copy_bits) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[cd]">GL32_draw_bitmap_AL1</a> from gl_mem_32bpp.o(i.GL32_draw_bitmap_AL1) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[ce]">GL32_draw_bitmap_AL2</a> from gl_mem_32bpp.o(i.GL32_draw_bitmap_AL2) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[cf]">GL32_draw_bitmap_AL4</a> from gl_mem_32bpp.o(i.GL32_draw_bitmap_AL4) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[d0]">GL32_draw_bitmap_AL8</a> from gl_mem_32bpp.o(i.GL32_draw_bitmap_AL8) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[c8]">GL32_draw_bitmap_ARGB1555</a> from gl_mem_32bpp.o(i.GL32_draw_bitmap_ARGB1555) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[c9]">GL32_draw_bitmap_ARGB4444</a> from gl_mem_32bpp.o(i.GL32_draw_bitmap_ARGB4444) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[cc]">GL32_draw_bitmap_ARGB8888</a> from gl_mem_32bpp.o(i.GL32_draw_bitmap_ARGB8888) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[c1]">GL32_draw_bitmap_LUT1</a> from gl_mem_32bpp.o(i.GL32_draw_bitmap_LUT1) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[c2]">GL32_draw_bitmap_LUT2</a> from gl_mem_32bpp.o(i.GL32_draw_bitmap_LUT2) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[c3]">GL32_draw_bitmap_LUT4</a> from gl_mem_32bpp.o(i.GL32_draw_bitmap_LUT4) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[c4]">GL32_draw_bitmap_LUT8</a> from gl_mem_32bpp.o(i.GL32_draw_bitmap_LUT8) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[c5]">GL32_draw_bitmap_RGB332</a> from gl_mem_32bpp.o(i.GL32_draw_bitmap_RGB332) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[c6]">GL32_draw_bitmap_RGB565</a> from gl_mem_32bpp.o(i.GL32_draw_bitmap_RGB565) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[ca]">GL32_draw_bitmap_RGB888</a> from gl_mem_32bpp.o(i.GL32_draw_bitmap_RGB888) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[c7]">GL32_draw_bitmap_XRGB1555</a> from gl_mem_32bpp.o(i.GL32_draw_bitmap_XRGB1555) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[cb]">GL32_draw_bitmap_XRGB8888</a> from gl_mem_32bpp.o(i.GL32_draw_bitmap_XRGB8888) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[bc]">GL32_draw_hline</a> from gl_mem_32bpp.o(i.GL32_draw_hline) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[bd]">GL32_draw_vline</a> from gl_mem_32bpp.o(i.GL32_draw_vline) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[be]">GL32_fill_rect</a> from gl_mem_32bpp.o(i.GL32_fill_rect) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[b9]">GL32_get_pixel</a> from gl_mem_32bpp.o(i.GL32_get_pixel) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[d2]">GL32_rotate_bitmap</a> from gl_mem_32bpp.o(i.GL32_rotate_bitmap) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[d1]">GL32_scale_bitmap</a> from gl_mem_32bpp.o(i.GL32_scale_bitmap) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[b7]">GL32_set_addr</a> from gl_mem_32bpp.o(i.GL32_set_addr) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[b8]">GL32_set_pixel</a> from gl_mem_32bpp.o(i.GL32_set_pixel) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[ba]">GL32_xor_pixel</a> from gl_mem_32bpp.o(i.GL32_xor_pixel) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[da]">GL8_copy_bits</a> from gl_mem_8bpp.o(i.GL8_copy_bits) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[e7]">GL8_draw_bitmap_AL1</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_AL1) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[e8]">GL8_draw_bitmap_AL2</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_AL2) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[e9]">GL8_draw_bitmap_AL4</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_AL4) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[ea]">GL8_draw_bitmap_AL8</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_AL8) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[e2]">GL8_draw_bitmap_ARGB1555</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_ARGB1555) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[e3]">GL8_draw_bitmap_ARGB4444</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_ARGB4444) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[e6]">GL8_draw_bitmap_ARGB8888</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_ARGB8888) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[db]">GL8_draw_bitmap_LUT1</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_LUT1) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[dc]">GL8_draw_bitmap_LUT2</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_LUT2) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[dd]">GL8_draw_bitmap_LUT4</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_LUT4) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[de]">GL8_draw_bitmap_LUT8</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_LUT8) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[df]">GL8_draw_bitmap_RGB332</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_RGB332) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[e0]">GL8_draw_bitmap_RGB565</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_RGB565) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[e4]">GL8_draw_bitmap_RGB888</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_RGB888) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[e1]">GL8_draw_bitmap_XRGB1555</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_XRGB1555) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[e5]">GL8_draw_bitmap_XRGB8888</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_XRGB8888) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[d7]">GL8_draw_hline</a> from gl_mem_8bpp.o(i.GL8_draw_hline) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[d8]">GL8_draw_vline</a> from gl_mem_8bpp.o(i.GL8_draw_vline) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[d9]">GL8_fill_rect</a> from gl_mem_8bpp.o(i.GL8_fill_rect) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[d5]">GL8_get_pixel</a> from gl_mem_8bpp.o(i.GL8_get_pixel) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[ec]">GL8_rotate_bitmap</a> from gl_mem_8bpp.o(i.GL8_rotate_bitmap) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[eb]">GL8_scale_bitmap</a> from gl_mem_8bpp.o(i.GL8_scale_bitmap) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[d3]">GL8_set_addr</a> from gl_mem_8bpp.o(i.GL8_set_addr) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[d4]">GL8_set_pixel</a> from gl_mem_8bpp.o(i.GL8_set_pixel) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[d6]">GL8_xor_pixel</a> from gl_mem_8bpp.o(i.GL8_xor_pixel) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[f5]">GUI_Boot_Interface_Dialog</a> from gui_bootinterface.o(i.GUI_Boot_Interface_Dialog) referenced from gui_desktop.o(i.desktop_proc)
 <LI><a href="#[f0]">GUI_RES_Writer_Dialog</a> from gui_res_writer_dialog.o(i.GUI_RES_Writer_Dialog) referenced from gui_bootinterface.o(i.GUI_Boot_Interface_Dialog)
 <LI><a href="#[f6]">GUI_Thread_Entry</a> from main.o(i.GUI_Thread_Entry) referenced from main.o(i.main)
 <LI><a href="#[72]">HRTIM1_FLT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6c]">HRTIM1_Master_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6d]">HRTIM1_TIMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6e]">HRTIM1_TIMB_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6f]">HRTIM1_TIMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[70]">HRTIM1_TIMD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[71]">HRTIM1_TIME_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[81]">HSEM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from cmb_fault.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2b]">I2C1_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2a]">I2C1_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2d]">I2C2_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2c]">I2C2_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4f]">I2C3_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4e]">I2C3_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[65]">I2C4_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[64]">I2C4_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7e]">JPEG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[62]">LPTIM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8d]">LPTIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8e]">LPTIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8f]">LPTIM4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[90]">LPTIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[91]">LPUART1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5e]">LTDC_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5d]">LTDC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7d]">MDIOS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7c]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7f]">MDMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from stm32h7xx_it.o(i.MemManage_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from stm32h7xx_it.o(i.NMI_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[68]">OTG_FS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[67]">OTG_FS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6a]">OTG_FS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[69]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[51]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[50]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[53]">OTG_HS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[52]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[c]">PVD_AVD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[61]">QUADSPI_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[55]">RNG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[34]">RTC_Alarm_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[e]">RTC_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5c]">SAI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[60]">SAI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[77]">SAI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[93]">SAI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3b]">SDMMC1_IRQHandler</a> from stm32h7xx_it.o(i.SDMMC1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[80]">SDMMC2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[66]">SPDIF_RX_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2f]">SPI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[59]">SPI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5a]">SPI5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5b]">SPI6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[78]">SWPMI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from stm32h7xx_it.o(i.SysTick_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[96]">SystemInit</a> from system_stm32h7xx.o(i.SystemInit) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[d]">TAMP_STAMP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[79]">TIM15_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7a]">TIM16_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7b]">TIM17_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[23]">TIM1_BRK_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[26]">TIM1_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[25]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[24]">TIM1_UP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[27]">TIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[28]">TIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[29]">TIM4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[57]">UART7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[58]">UART8_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[32]">USART3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4d]">USART6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from stm32h7xx_it.o(i.UsageFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[94]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[114]">_GetARGB</a> from surface_argb8888.o(i._GetARGB) referenced 4 times from surface_argb8888.o(.constdata)
 <LI><a href="#[113]">_GetRGB</a> from surface_argb8888.o(i._GetRGB) referenced 4 times from surface_argb8888.o(.constdata)
 <LI><a href="#[112]">_MapARGB</a> from surface_argb8888.o(i._MapARGB) referenced 4 times from surface_argb8888.o(.constdata)
 <LI><a href="#[111]">_MapRGB</a> from surface_argb8888.o(i._MapRGB) referenced 4 times from surface_argb8888.o(.constdata)
 <LI><a href="#[10b]">_MapRGB332</a> from surface_argb8888.o(i._MapRGB332) referenced 4 times from surface_argb8888.o(.constdata)
 <LI><a href="#[10c]">_MapRGB565</a> from surface_argb8888.o(i._MapRGB565) referenced 4 times from surface_argb8888.o(.constdata)
 <LI><a href="#[10d]">_MapXRGB1555</a> from surface_argb8888.o(i._MapXRGB1555) referenced 8 times from surface_argb8888.o(.constdata)
 <LI><a href="#[10e]">_MapXRGB4444</a> from surface_argb8888.o(i._MapXRGB4444) referenced 8 times from surface_argb8888.o(.constdata)
 <LI><a href="#[10f]">_MapXRGB8888</a> from surface_argb8888.o(i._MapXRGB8888) referenced 8 times from surface_argb8888.o(.constdata)
 <LI><a href="#[110]">_ToARGB</a> from surface_argb8888.o(i._ToARGB) referenced 4 times from surface_argb8888.o(.constdata)
 <LI><a href="#[f9]">__create_font</a> from gui_font_xft.o(i.__create_font) referenced from gui_font_xft.o(.constdata)
 <LI><a href="#[fa]">__delete_font</a> from gui_font_xft.o(i.__delete_font) referenced from gui_font_xft.o(.constdata)
 <LI><a href="#[fd]">__draw_char</a> from gui_font_xft.o(i.__draw_char) referenced from gui_font_xft.o(.constdata)
 <LI><a href="#[fc]">__get_char_info</a> from gui_font_xft.o(i.__get_char_info) referenced from gui_font_xft.o(.constdata)
 <LI><a href="#[fb]">__get_font_info</a> from gui_font_xft.o(i.__get_font_info) referenced from gui_font_xft.o(.constdata)
 <LI><a href="#[97]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[9a]">__mem_get_data</a> from gui_imagebmp.o(i.__mem_get_data) referenced from gui_imagebmp.o(i.BMP_Draw)
 <LI><a href="#[f4]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[f1]">desktop_proc</a> from gui_desktop.o(i.desktop_proc) referenced from gui_desktop.o(i.GUI_DesktopStartup)
 <LI><a href="#[f3]">fputc</a> from bsp_usart.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[ee]">gdHLine</a> from gd_line.o(i.gdHLine) referenced from gui_aa_core.o(i.GUI_AA_End)
 <LI><a href="#[ee]">gdHLine</a> from gd_line.o(i.gdHLine) referenced from gui_gdi.o(i.InitDC)
 <LI><a href="#[95]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[f8]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[f7]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[133]">win_proc</a> from widget_button.o(i.win_proc) referenced 6 times from widget_button.o(.constdata)
 <LI><a href="#[ef]">win_proc</a> from gui_bootinterface.o(i.win_proc) referenced from gui_bootinterface.o(i.GUI_Boot_Interface_Dialog)
 <LI><a href="#[f2]">win_proc</a> from gui_res_writer_dialog.o(i.win_proc) referenced from gui_res_writer_dialog.o(i.GUI_RES_Writer_Dialog)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[97]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[481]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[139]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[15e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[482]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[483]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[484]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[485]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[486]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[474]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[473]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[487]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[488]"></a>__asm___14_cm_backtrace_c_13c737ea__cmb_get_msp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cm_backtrace.o(.emb_text), UNUSED)

<P><STRONG><a name="[39c]"></a>__asm___14_cm_backtrace_c_13c737ea__cmb_get_psp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cm_backtrace.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_call_stack
</UL>

<P><STRONG><a name="[39b]"></a>__asm___14_cm_backtrace_c_13c737ea__cmb_get_sp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cm_backtrace.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_call_stack
</UL>

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>BDMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>BDMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>BDMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>BDMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>BDMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>BDMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>BDMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>BDMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>HRTIM1_FLT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>HRTIM1_Master_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>HRTIM1_TIMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>HRTIM1_TIMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>HRTIM1_TIMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>HRTIM1_TIMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>HRTIM1_TIME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>LPTIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>MDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>OTG_FS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_FS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>SAI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>SAI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmb_fault.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = HardFault_Handler &rArr; cm_backtrace_fault &rArr; print_call_stack &rArr; cm_backtrace_call_stack &rArr; get_cur_thread_stack_info &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[13d]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[489]"></a>___aeabi_memcpy8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>__aeabi_memcpy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_font
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CatalogInfo
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP_GetInfo
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL32_draw_bitmap_XRGB8888
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL32_copy_bits
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_draw_bitmap_RGB565
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_copy_bits
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_copy_bits
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goodix_TS_Work_Func
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_realloc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mem_get_data
</UL>

<P><STRONG><a name="[2a8]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[48a]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_memset8
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[48b]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[48c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Begin
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FlushLine
</UL>

<P><STRONG><a name="[1d0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DC_Alloc
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateDC
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Init
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goodix_TS_Work_Func
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
</UL>

<P><STRONG><a name="[48d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[3a3]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
</UL>

<P><STRONG><a name="[30d]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CatalogInfo
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Catalog
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Ignore
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_type_equals
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_set
</UL>

<P><STRONG><a name="[1a7]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Ignore
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BurnFile
</UL>

<P><STRONG><a name="[30b]"></a>strrchr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Ignore
</UL>

<P><STRONG><a name="[143]"></a>strcasecmp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, strcasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Catalog
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Ignore
</UL>

<P><STRONG><a name="[145]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CatalogInfo
</UL>

<P><STRONG><a name="[148]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawBoldLine
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawCircle
</UL>

<P><STRONG><a name="[14b]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawBoldLine
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
</UL>

<P><STRONG><a name="[14c]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawBoldLine
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawCircle
</UL>

<P><STRONG><a name="[36e]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawBoldLine
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_circle_pixel
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawCircle
</UL>

<P><STRONG><a name="[14d]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawBoldLine
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
</UL>

<P><STRONG><a name="[14e]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawArc
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_val_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[152]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawArc
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_val_init
</UL>

<P><STRONG><a name="[153]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprtf_float_date_analy
</UL>

<P><STRONG><a name="[154]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL32_rotate_bitmap
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_rotate_bitmap
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_rotate_bitmap
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprtf_float_date_analy
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawCircle
</UL>

<P><STRONG><a name="[155]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL32_rotate_bitmap
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_rotate_bitmap
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_rotate_bitmap
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawCircle
</UL>

<P><STRONG><a name="[1fb]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawArc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL32_rotate_bitmap
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_rotate_bitmap
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_rotate_bitmap
</UL>

<P><STRONG><a name="[48e]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL32_rotate_bitmap
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_rotate_bitmap
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_rotate_bitmap
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawBoldLine
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawCircle
</UL>

<P><STRONG><a name="[157]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawArc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL32_rotate_bitmap
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_rotate_bitmap
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_rotate_bitmap
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprtf_float_date_analy
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawCircle
</UL>

<P><STRONG><a name="[158]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawArc
</UL>

<P><STRONG><a name="[22e]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL32_rotate_bitmap
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_rotate_bitmap
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_rotate_bitmap
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawBoldLine
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
</UL>

<P><STRONG><a name="[381]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawBoldLine
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_circle_pixel
</UL>

<P><STRONG><a name="[159]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL32_rotate_bitmap
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_rotate_bitmap
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_rotate_bitmap
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprtf_float_date_analy
</UL>

<P><STRONG><a name="[15a]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawArc
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprtf_float_date_analy
</UL>

<P><STRONG><a name="[22c]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL32_rotate_bitmap
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_rotate_bitmap
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_rotate_bitmap
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
</UL>

<P><STRONG><a name="[48f]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[3e3]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprtf_float_date_analy
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_val_init
</UL>

<P><STRONG><a name="[3e2]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_val_init
</UL>

<P><STRONG><a name="[15b]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL32_rotate_bitmap
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_rotate_bitmap
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_rotate_bitmap
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawCircle
</UL>

<P><STRONG><a name="[372]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
</UL>

<P><STRONG><a name="[371]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
</UL>

<P><STRONG><a name="[373]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
</UL>

<P><STRONG><a name="[13f]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[490]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[491]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[492]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>

<P><STRONG><a name="[147]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[493]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[149]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[151]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[150]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[13a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[494]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[15d]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[15f]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[495]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[496]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>AA_DrawBoldLine</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gd_line.o(i.AA_DrawBoldLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = AA_DrawBoldLine &rArr; _Wu_DrawBoldLine &rArr; gdSetPixelARGB &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawBoldLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
</UL>

<P><STRONG><a name="[162]"></a>AA_DrawCircle</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, gd_circle.o(i.AA_DrawCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = AA_DrawCircle &rArr; _Wu_DrawCircle &rArr; draw_circle_pixel &rArr; gdSetPixelARGB &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>

<P><STRONG><a name="[166]"></a>AA_FillCircle</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, gd_circle.o(i.AA_FillCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = AA_FillCircle &rArr; _Wu_DrawCircle &rArr; draw_circle_pixel &rArr; gdSetPixelARGB &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdFillCircle
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>

<P><STRONG><a name="[ed]"></a>AA_gdHLine</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, gui_aa_core.o(i.AA_gdHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = AA_gdHLine &rArr; _FlushLine &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FlushLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_aa_core.o(i.GUI_AA_Begin)
</UL>
<P><STRONG><a name="[10a]"></a>ARGB4444_GetARGB</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, surface_argb4444.o(i.ARGB4444_GetARGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ARGB4444_GetARGB
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL32_rotate_bitmap
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL32_draw_bitmap_ARGB4444
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_rotate_bitmap
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_draw_bitmap_ARGB4444
</UL>
<BR>[Address Reference Count : 1]<UL><LI> surface_argb4444.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>ARGB4444_GetRGB</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, surface_argb4444.o(i.ARGB4444_GetRGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ARGB4444_GetRGB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> surface_argb4444.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>ARGB4444_MapARGB</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, surface_argb4444.o(i.ARGB4444_MapARGB))
<BR>[Address Reference Count : 1]<UL><LI> surface_argb4444.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>ARGB4444_MapARGB1555</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, surface_argb4444.o(i.ARGB4444_MapARGB1555))
<BR>[Address Reference Count : 1]<UL><LI> surface_argb4444.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>ARGB4444_MapARGB4444</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, surface_argb4444.o(i.ARGB4444_MapARGB4444))
<BR>[Address Reference Count : 1]<UL><LI> surface_argb4444.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>ARGB4444_MapARGB8888</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, surface_argb4444.o(i.ARGB4444_MapARGB8888))
<BR>[Address Reference Count : 1]<UL><LI> surface_argb4444.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>ARGB4444_MapRGB</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, surface_argb4444.o(i.ARGB4444_MapRGB))
<BR>[Address Reference Count : 1]<UL><LI> surface_argb4444.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>ARGB4444_MapRGB332</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, surface_argb4444.o(i.ARGB4444_MapRGB332))
<BR>[Address Reference Count : 1]<UL><LI> surface_argb4444.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>ARGB4444_MapRGB565</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, surface_argb4444.o(i.ARGB4444_MapRGB565))
<BR>[Address Reference Count : 1]<UL><LI> surface_argb4444.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>ARGB4444_MapXRGB1555</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, surface_argb4444.o(i.ARGB4444_MapXRGB1555))
<BR>[Address Reference Count : 1]<UL><LI> surface_argb4444.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>ARGB4444_MapXRGB4444</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, surface_argb4444.o(i.ARGB4444_MapXRGB4444))
<BR>[Address Reference Count : 1]<UL><LI> surface_argb4444.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>ARGB4444_MapXRGB8888</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, surface_argb4444.o(i.ARGB4444_MapXRGB8888))
<BR>[Address Reference Count : 1]<UL><LI> surface_argb4444.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>ARGB4444_ToARGB</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, surface_argb4444.o(i.ARGB4444_ToARGB))
<BR>[Address Reference Count : 1]<UL><LI> surface_argb4444.o(.constdata)
</UL>
<P><STRONG><a name="[16d]"></a>AlphaBlendColor</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_gdi.o(i.AlphaBlendColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AlphaBlendColor &rArr; GUI_AlphaBlendColor
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AlphaBlendColor
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill3DRect
</UL>

<P><STRONG><a name="[177]"></a>BMP_Draw</STRONG> (Thumb, 1116 bytes, Stack size 112 bytes, gui_imagebmp.o(i.BMP_Draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = BMP_Draw &rArr; BMP_DrawEx &rArr; DrawBitmap &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitmap
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapRGB
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP_DrawEx
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
</UL>

<P><STRONG><a name="[178]"></a>BMP_DrawEx</STRONG> (Thumb, 1218 bytes, Stack size 152 bytes, gui_imagebmp.o(i.BMP_DrawEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = BMP_DrawEx &rArr; DrawBitmap &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapXRGB8888
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitmap
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP_Draw
</UL>

<P><STRONG><a name="[17e]"></a>BMP_GetInfo</STRONG> (Thumb, 348 bytes, Stack size 80 bytes, gui_imagebmp.o(i.BMP_GetInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BMP_GetInfo &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
</UL>

<P><STRONG><a name="[187]"></a>BSP_QSPI_Erase_Chip</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, bsp_qspi_flash.o(i.BSP_QSPI_Erase_Chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = BSP_QSPI_Erase_Chip &rArr; QSPI_WriteEnable &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_AutoPollingMemReady
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BulkErase_GUI
</UL>

<P><STRONG><a name="[18b]"></a>BSP_QSPI_GetStatus</STRONG> (Thumb, 92 bytes, Stack size 72 bytes, bsp_qspi_flash.o(i.BSP_QSPI_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BSP_QSPI_GetStatus &rArr; HAL_QSPI_Receive &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BulkErase_GUI
</UL>

<P><STRONG><a name="[18d]"></a>BSP_QSPI_Init</STRONG> (Thumb, 118 bytes, Stack size 72 bytes, bsp_qspi_flash.o(i.BSP_QSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = BSP_QSPI_Init &rArr; QSPI_ResetMemory &rArr; QSPI_AutoPollingMemReady &rArr; HAL_QSPI_AutoPolling &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ResetMemory
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_AutoPollingMemReady
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Init
</UL>

<P><STRONG><a name="[190]"></a>BSP_QSPI_Read</STRONG> (Thumb, 90 bytes, Stack size 72 bytes, bsp_qspi_flash.o(i.BSP_QSPI_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BSP_QSPI_Read &rArr; HAL_QSPI_Receive &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Resource
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_DevRead
</UL>

<P><STRONG><a name="[191]"></a>BSP_QSPI_Write</STRONG> (Thumb, 184 bytes, Stack size 88 bytes, bsp_qspi_flash.o(i.BSP_QSPI_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = BSP_QSPI_Write &rArr; QSPI_WriteEnable &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_AutoPollingMemReady
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_Content
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_Catalog
</UL>

<P><STRONG><a name="[192]"></a>BSP_SD_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bsp_sdio_sd.o(i.BSP_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = BSP_SD_Init &rArr; HAL_SD_Init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[193]"></a>BSP_SD_MspInit</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, bsp_sdio_sd.o(i.BSP_SD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_SD_MspInit &rArr; WIFI_PDN_INIT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_PDN_INIT
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[163]"></a>BeginDraw</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gui_core.o(i.BeginDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LPtoDP
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMemDC
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdVLine
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawArc
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawRoundRectEx
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawRoundRect1
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GradientFillRect
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRoundRect
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdHLine
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdFillRect
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AA_FillCircle
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AA_DrawCircle
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawFocusRect
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitmap
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorPixel
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdSetPixelARGB
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdSetPixel
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdLine
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawLine
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawBoldLine
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitBlt
</UL>

<P><STRONG><a name="[19d]"></a>BeginPaint</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, gui_window.o(i.BeginPaint))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = BeginPaint &rArr; GetDCEx &rArr; _GetWindowClipRgn &rArr; _CalculateWindowClipRgn &rArr; RGN_SubtractRect &rArr; GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDCEx
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
</UL>

<P><STRONG><a name="[1a0]"></a>BitBlt</STRONG> (Thumb, 302 bytes, Stack size 120 bytes, gui_blt.o(i.BitBlt))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = BitBlt &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LPtoDP
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC_Unlock
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC_Lock
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorCheck
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_BitBlt
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FlushHandler
</UL>

<P><STRONG><a name="[170]"></a>BurnFile</STRONG> (Thumb, 186 bytes, Stack size 4184 bytes, backend_res_writer.o(i.BurnFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 17644<LI>Call Chain = BurnFile &rArr; Make_Catalog &rArr;  Make_Catalog (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Catalog
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Resource
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_Content
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_Catalog
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWindowText
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_msleep
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BulkErase_GUI
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Free
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Alloc
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_FLASH_Writer
</UL>

<P><STRONG><a name="[1ae]"></a>Burn_Catalog</STRONG> (Thumb, 154 bytes, Stack size 80 bytes, backend_res_writer.o(i.Burn_Catalog))
<BR><BR>[Stack]<UL><LI>Max Depth = 5188<LI>Call Chain = Burn_Catalog &rArr; Read_CatalogInfo &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CatalogInfo
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWindowText
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_msleep
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BurnFile
</UL>

<P><STRONG><a name="[1af]"></a>Burn_Content</STRONG> (Thumb, 350 bytes, Stack size 344 bytes, backend_res_writer.o(i.Burn_Content))
<BR><BR>[Stack]<UL><LI>Max Depth = 5452<LI>Call Chain = Burn_Content &rArr; Read_CatalogInfo &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_wsprintf
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CatalogInfo
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWindowText
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_msleep
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Write
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BurnFile
</UL>

<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1b7]"></a>CheckWindowHit</STRONG> (Thumb, 270 bytes, Stack size 72 bytes, gui_window.o(i.CheckWindowHit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CheckWindowHit &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsWindowVisible
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRectEmpty
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PtInRect
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflateRectEx
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInput
</UL>

<P><STRONG><a name="[1b0]"></a>Check_Resource</STRONG> (Thumb, 494 bytes, Stack size 600 bytes, backend_res_writer.o(i.Check_Resource))
<BR><BR>[Stack]<UL><LI>Max Depth = 5708<LI>Call Chain = Check_Resource &rArr; Read_CatalogInfo &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_wsprintf
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CatalogInfo
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWindowText
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_msleep
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Read
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_GetOffset
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BurnFile
</UL>

<P><STRONG><a name="[1bf]"></a>CommFace_DrawFocusRect</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, gui_face.o(i.CommFace_DrawFocusRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CommFace_DrawFocusRect &rArr; XorPixel &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflateRect
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapRGB
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>

<P><STRONG><a name="[1c2]"></a>CommFace_DrawWindowNC</STRONG> (Thumb, 240 bytes, Stack size 80 bytes, gui_face.o(i.CommFace_DrawWindowNC))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = CommFace_DrawWindowNC &rArr; DrawWindowNC &rArr; DrawRoundRect &rArr; _DrawRoundRectEx &rArr; VLine &rArr; Line &rArr; solid_line &rArr; _FillPolygon &rArr; GUI_AA_End &rArr; _FlushLine &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParent
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGN_SubtractRect
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteRgn
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRectRgnIndirect
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScreenToWindow
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowRect
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCloseBoxRect
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCaptionRect
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseDC
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowDC
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClientRectToScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PaintHandler
</UL>

<P><STRONG><a name="[1d1]"></a>CopyRect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gui_region.o(i.CopyRect))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill3DRect
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateDC
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_vscroll_by_value
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_hscroll_by_value
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vscroll_rect
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hscroll_rect
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EraseBackgnd
</UL>

<P><STRONG><a name="[1cf]"></a>CreateDC</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, gui_gdi.o(i.CreateDC))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CreateDC &rArr; GUI_MEM_Alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDC
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRect
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FlushHandler
</UL>

<P><STRONG><a name="[1d3]"></a>CreateFont</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gui_font.o(i.CreateFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CreateFont &rArr; GUI_MEM_Alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XFT_CreateFont
</UL>

<P><STRONG><a name="[1c7]"></a>CreateRectRgnIndirect</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gui_region.o(i.CreateRectRgnIndirect))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CreateRectRgnIndirect &rArr; GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectLL_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawWindowNC
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalculateWindowClipRgn
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertInvRect
</UL>

<P><STRONG><a name="[1d5]"></a>CreateWindowEx</STRONG> (Thumb, 364 bytes, Stack size 88 bytes, gui_window.o(i.CreateWindowEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = CreateWindowEx &rArr; SetForegroundWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForegroundWindow
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FindClass
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindow
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRect
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowClipFlag
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RES_Writer_Dialog
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Boot_Interface_Dialog
</UL>

<P><STRONG><a name="[1a3]"></a>CursorCheck</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_cursor.o(i.CursorCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_CursorCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdVLine
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdHLine
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdFillRect
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitmap
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorPixel
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdSetPixelARGB
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdSetPixel
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitBlt
</UL>

<P><STRONG><a name="[1e0]"></a>CursorFix</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_cursor.o(i.CursorFix))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CursorFix &rArr; GL_CursorFix &rArr; _CursorShow &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_CursorFix
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
</UL>

<P><STRONG><a name="[1e2]"></a>DC_Alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gui_gdi.o(i.DC_Alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DC_Alloc &rArr; GUI_MEM_Alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDCEx
</UL>

<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3c9]"></a>DefDesktopProc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gui_window.o(i.DefDesktopProc))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desktop_proc
</UL>

<P><STRONG><a name="[1e3]"></a>DefWindowProc</STRONG> (Thumb, 486 bytes, Stack size 48 bytes, gui_window.o(i.DefWindowProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = DefWindowProc &rArr; DestroyWindow &rArr;  DestroyWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostQuitMessage
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForegroundWindow
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWindowHit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_wstrlen
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPaint
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginPaint
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyWindow
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBrushColor
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapRGB
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_wstrncpy
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_wstr_free
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_wstr_alloc
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWindowPos
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRect
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>

<P><STRONG><a name="[1ee]"></a>DeleteDC</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gui_gdi.o(i.DeleteDC))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DeleteDC &rArr; GUI_DeleteSurface &rArr; GUI_GRAM_Free &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsEnableAA
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DeleteSurface
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseDC
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FlushHandler
</UL>

<P><STRONG><a name="[1ce]"></a>DeleteRgn</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_region.o(i.DeleteRgn))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DeleteRgn &rArr; GUI_RectLL_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectLL_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WindowCleanup
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPaint
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawWindowNC
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowClipRgn
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FlushHandler
</UL>

<P><STRONG><a name="[1ec]"></a>DestroyWindow</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, gui_window.o(i.DestroyWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + In Cycle
<LI>Call Chain = DestroyWindow &rArr;  DestroyWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WindowCleanup
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClrInputWindow
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableWindow
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyWindow
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyWindow
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>

<P><STRONG><a name="[1f6]"></a>DispatchMessage</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gui_message.o(i.DispatchMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispatchMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHWND
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RES_Writer_Dialog
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Boot_Interface_Dialog
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DesktopStartup
</UL>

<P><STRONG><a name="[1f8]"></a>Draw3DRect</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd_rect.o(i.Draw3DRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Draw3DRect &rArr; gdDraw3DRect &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdDraw3DRect
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_char
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushbutton_paint
</UL>

<P><STRONG><a name="[1fa]"></a>DrawArc</STRONG> (Thumb, 230 bytes, Stack size 72 bytes, gd_arc.o(i.DrawArc))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = DrawArc &rArr; GL_DrawArc &rArr; _DrawArc &rArr; sin &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_End
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Begin
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsEnableAA
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawArc
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawRoundRectEx
</UL>

<P><STRONG><a name="[17a]"></a>DrawBitmap</STRONG> (Thumb, 994 bytes, Stack size 128 bytes, gui_bitmap.o(i.DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = DrawBitmap &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LPtoDP
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_char
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP_Draw
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP_DrawEx
</UL>

<P><STRONG><a name="[1ff]"></a>DrawRect</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, gd_rect.o(i.DrawRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = DrawRect &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdVLine
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InflateRect
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_btn_backgnd
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_window_frame
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
</UL>

<P><STRONG><a name="[202]"></a>DrawRoundRect</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd_rect.o(i.DrawRoundRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = DrawRoundRect &rArr; _DrawRoundRectEx &rArr; VLine &rArr; Line &rArr; solid_line &rArr; _FillPolygon &rArr; GUI_AA_End &rArr; _FlushLine &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawRoundRectEx
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawRoundRect1
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsEnableAA
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_track
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_btn
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushbutton_paint
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
</UL>

<P><STRONG><a name="[205]"></a>DrawTextEx</STRONG> (Thumb, 654 bytes, Stack size 136 bytes, gd_text.o(i.DrawTextEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = DrawTextEx &rArr; DrawRect &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_wstrlen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_wstrchr
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawString
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRect
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InflateRect
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetDrawRect
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC_Unlock
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC_Lock
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetFontInfo
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawChar
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextWidth
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextExtent
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushbutton_paint
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EraseBackgnd
</UL>

<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_touch_gtxx.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = EXTI3_IRQHandler &rArr; GTP_TouchProcess &rArr; Goodix_TS_Work_Func &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; i2c_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_TouchProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1f2]"></a>EnableWindow</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, gui_window.o(i.EnableWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = EnableWindow &rArr; InvalidateRect &rArr; _InsertInvRect &rArr; RGN_SubtractRect &rArr; GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRect
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyWindow
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDesktop
</UL>

<P><STRONG><a name="[165]"></a>EndDraw</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gui_core.o(i.EndDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EndDraw &rArr; WIN_Unlock &rArr; GUI_Unlock &rArr; GUI_MutexUnlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMemDC
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorFix
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdVLine
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawArc
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawRoundRectEx
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawRoundRect1
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GradientFillRect
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRoundRect
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdHLine
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdFillRect
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AA_FillCircle
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AA_DrawCircle
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawFocusRect
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitmap
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorPixel
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdSetPixelARGB
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdSetPixel
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdLine
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawLine
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawBoldLine
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitBlt
</UL>

<P><STRONG><a name="[1e6]"></a>EndPaint</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, gui_window.o(i.EndPaint))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = EndPaint &rArr; GUI_PaintHandler &rArr;  GUI_PaintHandler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PostPaintMessage
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteRgn
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindow
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseDC
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PaintHandler
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FlushHandler
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertInvRect
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
</UL>

<P><STRONG><a name="[2c1]"></a>FMC_SDRAM_Init</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, stm32h7xx_ll_fmc.o(i.FMC_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[2c4]"></a>FMC_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_ll_fmc.o(i.FMC_SDRAM_ProgramRefreshRate))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>

<P><STRONG><a name="[2c6]"></a>FMC_SDRAM_SendCommand</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32h7xx_ll_fmc.o(i.FMC_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>

<P><STRONG><a name="[2c2]"></a>FMC_SDRAM_Timing_Init</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, stm32h7xx_ll_fmc.o(i.FMC_SDRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FMC_SDRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[21a]"></a>FileSystem_Init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, gui_fs_port.o(i.FileSystem_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = FileSystem_Init &rArr; f_mount &rArr; find_volume &rArr; disk_initialize &rArr; BSP_SD_Init &rArr; HAL_SD_Init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_PDN_INIT
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Startup
</UL>

<P><STRONG><a name="[21e]"></a>Fill3DRect</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, gd_rect.o(i.Fill3DRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Fill3DRect &rArr; gdDraw3DRect &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdDraw3DRect
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflateRectEx
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdFillRect
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToARGB
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapARGB8888
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlphaBlendColor
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRect
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
</UL>

<P><STRONG><a name="[222]"></a>FillCircle</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, gd_circle.o(i.FillCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = FillCircle &rArr; GUI_AA_End &rArr; _FlushLine &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_End
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Begin
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsEnableAA
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdFillCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>

<P><STRONG><a name="[1e5]"></a>FillRect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd_rect.o(i.FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = FillRect &rArr; gdFillRect &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdFillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_track
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_btn
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_pb_rect
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushbutton_paint
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_btn_backgnd
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desktop_proc
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EraseBackgnd
</UL>

<P><STRONG><a name="[214]"></a>FillRoundRect</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, gd_rect.o(i.FillRoundRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = FillRoundRect &rArr; gdFillRoundRect &rArr; gdFillRect &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_End
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Begin
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdFillRoundRect
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsEnableAA
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_track
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_btn
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushbutton_paint
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
</UL>

<P><STRONG><a name="[364]"></a>GDI_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_gdi.o(i.GDI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X_GUI_Init
</UL>

<P><STRONG><a name="[a3]"></a>GL16_FillRectARGB</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, gl_mem_16bpp.o(i.GL16_FillRectARGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GL16_FillRectARGB &rArr; __blend_argb
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_FillRectARGB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[9f]"></a>GL16_SetPixel_ARGB</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, gl_mem_16bpp.o(i.GL16_SetPixel_ARGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GL16_SetPixel_ARGB &rArr; __blend_argb
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[a4]"></a>GL16_copy_bits</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, gl_mem_16bpp.o(i.GL16_copy_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GL16_copy_bits &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_CopyBits
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[b1]"></a>GL16_draw_bitmap_AL1</STRONG> (Thumb, 270 bytes, Stack size 52 bytes, gl_mem_16bpp.o(i.GL16_draw_bitmap_AL1))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GL16_draw_bitmap_AL1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[b2]"></a>GL16_draw_bitmap_AL2</STRONG> (Thumb, 388 bytes, Stack size 72 bytes, gl_mem_16bpp.o(i.GL16_draw_bitmap_AL2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GL16_draw_bitmap_AL2 &rArr; __blend_argb
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[b3]"></a>GL16_draw_bitmap_AL4</STRONG> (Thumb, 234 bytes, Stack size 72 bytes, gl_mem_16bpp.o(i.GL16_draw_bitmap_AL4))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GL16_draw_bitmap_AL4 &rArr; __blend_argb
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[b4]"></a>GL16_draw_bitmap_AL8</STRONG> (Thumb, 142 bytes, Stack size 72 bytes, gl_mem_16bpp.o(i.GL16_draw_bitmap_AL8))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GL16_draw_bitmap_AL8 &rArr; __blend_argb
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[ac]"></a>GL16_draw_bitmap_ARGB1555</STRONG> (Thumb, 144 bytes, Stack size 72 bytes, gl_mem_16bpp.o(i.GL16_draw_bitmap_ARGB1555))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GL16_draw_bitmap_ARGB1555
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[ad]"></a>GL16_draw_bitmap_ARGB4444</STRONG> (Thumb, 200 bytes, Stack size 88 bytes, gl_mem_16bpp.o(i.GL16_draw_bitmap_ARGB4444))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GL16_draw_bitmap_ARGB4444 &rArr; __blend_argb
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DrawBitmap
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARGB4444_GetARGB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[b0]"></a>GL16_draw_bitmap_ARGB8888</STRONG> (Thumb, 192 bytes, Stack size 72 bytes, gl_mem_16bpp.o(i.GL16_draw_bitmap_ARGB8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GL16_draw_bitmap_ARGB8888 &rArr; __blend_argb
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[a5]"></a>GL16_draw_bitmap_LUT1</STRONG> (Thumb, 278 bytes, Stack size 52 bytes, gl_mem_16bpp.o(i.GL16_draw_bitmap_LUT1))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GL16_draw_bitmap_LUT1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[a6]"></a>GL16_draw_bitmap_LUT2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gl_mem_16bpp.o(i.GL16_draw_bitmap_LUT2))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[a7]"></a>GL16_draw_bitmap_LUT4</STRONG> (Thumb, 130 bytes, Stack size 52 bytes, gl_mem_16bpp.o(i.GL16_draw_bitmap_LUT4))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GL16_draw_bitmap_LUT4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[a8]"></a>GL16_draw_bitmap_LUT8</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, gl_mem_16bpp.o(i.GL16_draw_bitmap_LUT8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GL16_draw_bitmap_LUT8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[a9]"></a>GL16_draw_bitmap_RGB332</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, gl_mem_16bpp.o(i.GL16_draw_bitmap_RGB332))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GL16_draw_bitmap_RGB332
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[aa]"></a>GL16_draw_bitmap_RGB565</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, gl_mem_16bpp.o(i.GL16_draw_bitmap_RGB565))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GL16_draw_bitmap_RGB565 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DrawBitmap
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[ae]"></a>GL16_draw_bitmap_RGB888</STRONG> (Thumb, 148 bytes, Stack size 72 bytes, gl_mem_16bpp.o(i.GL16_draw_bitmap_RGB888))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GL16_draw_bitmap_RGB888
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[ab]"></a>GL16_draw_bitmap_XRGB1555</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, gl_mem_16bpp.o(i.GL16_draw_bitmap_XRGB1555))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GL16_draw_bitmap_XRGB1555
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[af]"></a>GL16_draw_bitmap_XRGB8888</STRONG> (Thumb, 148 bytes, Stack size 72 bytes, gl_mem_16bpp.o(i.GL16_draw_bitmap_XRGB8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GL16_draw_bitmap_XRGB8888
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[a0]"></a>GL16_draw_hline</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gl_mem_16bpp.o(i.GL16_draw_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GL16_draw_hline
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_memset16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[a1]"></a>GL16_draw_vline</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gl_mem_16bpp.o(i.GL16_draw_vline))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GL16_draw_vline &rArr; GUI_memset16_step
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_memset16_step
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[a2]"></a>GL16_fill_rect</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, gl_mem_16bpp.o(i.GL16_fill_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GL16_fill_rect
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_FillRect
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_memset16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[9d]"></a>GL16_get_pixel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gl_mem_16bpp.o(i.GL16_get_pixel))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[b6]"></a>GL16_rotate_bitmap</STRONG> (Thumb, 944 bytes, Stack size 168 bytes, gl_mem_16bpp.o(i.GL16_rotate_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = GL16_rotate_bitmap &rArr; sin &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DrawBitmap
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARGB4444_GetARGB
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[b5]"></a>GL16_scale_bitmap</STRONG> (Thumb, 254 bytes, Stack size 56 bytes, gl_mem_16bpp.o(i.GL16_scale_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GL16_scale_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_ScaleBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[9b]"></a>GL16_set_addr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gl_mem_16bpp.o(i.GL16_set_addr))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[9c]"></a>GL16_set_pixel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gl_mem_16bpp.o(i.GL16_set_pixel))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[9e]"></a>GL16_xor_pixel</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gl_mem_16bpp.o(i.GL16_xor_pixel))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[bf]"></a>GL32_FillRectARGB</STRONG> (Thumb, 88 bytes, Stack size 64 bytes, gl_mem_32bpp.o(i.GL32_FillRectARGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GL32_FillRectARGB &rArr; __blend_argb
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[bb]"></a>GL32_SetPixel_ARGB</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, gl_mem_32bpp.o(i.GL32_SetPixel_ARGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GL32_SetPixel_ARGB &rArr; __blend_argb
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[c0]"></a>GL32_copy_bits</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, gl_mem_32bpp.o(i.GL32_copy_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GL32_copy_bits &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[cd]"></a>GL32_draw_bitmap_AL1</STRONG> (Thumb, 268 bytes, Stack size 52 bytes, gl_mem_32bpp.o(i.GL32_draw_bitmap_AL1))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GL32_draw_bitmap_AL1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[ce]"></a>GL32_draw_bitmap_AL2</STRONG> (Thumb, 384 bytes, Stack size 72 bytes, gl_mem_32bpp.o(i.GL32_draw_bitmap_AL2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GL32_draw_bitmap_AL2 &rArr; __blend_argb
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[cf]"></a>GL32_draw_bitmap_AL4</STRONG> (Thumb, 232 bytes, Stack size 72 bytes, gl_mem_32bpp.o(i.GL32_draw_bitmap_AL4))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GL32_draw_bitmap_AL4 &rArr; __blend_argb
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[d0]"></a>GL32_draw_bitmap_AL8</STRONG> (Thumb, 138 bytes, Stack size 72 bytes, gl_mem_32bpp.o(i.GL32_draw_bitmap_AL8))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GL32_draw_bitmap_AL8 &rArr; __blend_argb
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[c8]"></a>GL32_draw_bitmap_ARGB1555</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, gl_mem_32bpp.o(i.GL32_draw_bitmap_ARGB1555))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GL32_draw_bitmap_ARGB1555
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[c9]"></a>GL32_draw_bitmap_ARGB4444</STRONG> (Thumb, 168 bytes, Stack size 80 bytes, gl_mem_32bpp.o(i.GL32_draw_bitmap_ARGB4444))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GL32_draw_bitmap_ARGB4444 &rArr; __blend_argb
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARGB4444_GetARGB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[cc]"></a>GL32_draw_bitmap_ARGB8888</STRONG> (Thumb, 160 bytes, Stack size 64 bytes, gl_mem_32bpp.o(i.GL32_draw_bitmap_ARGB8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GL32_draw_bitmap_ARGB8888 &rArr; __blend_argb
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[c1]"></a>GL32_draw_bitmap_LUT1</STRONG> (Thumb, 274 bytes, Stack size 52 bytes, gl_mem_32bpp.o(i.GL32_draw_bitmap_LUT1))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GL32_draw_bitmap_LUT1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[c2]"></a>GL32_draw_bitmap_LUT2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gl_mem_32bpp.o(i.GL32_draw_bitmap_LUT2))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[c3]"></a>GL32_draw_bitmap_LUT4</STRONG> (Thumb, 130 bytes, Stack size 52 bytes, gl_mem_32bpp.o(i.GL32_draw_bitmap_LUT4))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GL32_draw_bitmap_LUT4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[c4]"></a>GL32_draw_bitmap_LUT8</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, gl_mem_32bpp.o(i.GL32_draw_bitmap_LUT8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GL32_draw_bitmap_LUT8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[c5]"></a>GL32_draw_bitmap_RGB332</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, gl_mem_32bpp.o(i.GL32_draw_bitmap_RGB332))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GL32_draw_bitmap_RGB332
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[c6]"></a>GL32_draw_bitmap_RGB565</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, gl_mem_32bpp.o(i.GL32_draw_bitmap_RGB565))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GL32_draw_bitmap_RGB565
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[ca]"></a>GL32_draw_bitmap_RGB888</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, gl_mem_32bpp.o(i.GL32_draw_bitmap_RGB888))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GL32_draw_bitmap_RGB888
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[c7]"></a>GL32_draw_bitmap_XRGB1555</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, gl_mem_32bpp.o(i.GL32_draw_bitmap_XRGB1555))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GL32_draw_bitmap_XRGB1555
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[cb]"></a>GL32_draw_bitmap_XRGB8888</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, gl_mem_32bpp.o(i.GL32_draw_bitmap_XRGB8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GL32_draw_bitmap_XRGB8888 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[bc]"></a>GL32_draw_hline</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gl_mem_32bpp.o(i.GL32_draw_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GL32_draw_hline
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_memset32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[bd]"></a>GL32_draw_vline</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gl_mem_32bpp.o(i.GL32_draw_vline))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GL32_draw_vline &rArr; GUI_memset32_step
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_memset32_step
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[be]"></a>GL32_fill_rect</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, gl_mem_32bpp.o(i.GL32_fill_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GL32_fill_rect
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_memset32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[b9]"></a>GL32_get_pixel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gl_mem_32bpp.o(i.GL32_get_pixel))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[d2]"></a>GL32_rotate_bitmap</STRONG> (Thumb, 934 bytes, Stack size 168 bytes, gl_mem_32bpp.o(i.GL32_rotate_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = GL32_rotate_bitmap &rArr; sin &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARGB4444_GetARGB
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[d1]"></a>GL32_scale_bitmap</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, gl_mem_32bpp.o(i.GL32_scale_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GL32_scale_bitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[b7]"></a>GL32_set_addr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gl_mem_32bpp.o(i.GL32_set_addr))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[b8]"></a>GL32_set_pixel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gl_mem_32bpp.o(i.GL32_set_pixel))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[ba]"></a>GL32_xor_pixel</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gl_mem_32bpp.o(i.GL32_xor_pixel))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[da]"></a>GL8_copy_bits</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, gl_mem_8bpp.o(i.GL8_copy_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GL8_copy_bits &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[e7]"></a>GL8_draw_bitmap_AL1</STRONG> (Thumb, 268 bytes, Stack size 52 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_AL1))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GL8_draw_bitmap_AL1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[e8]"></a>GL8_draw_bitmap_AL2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_AL2))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[e9]"></a>GL8_draw_bitmap_AL4</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_AL4))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[ea]"></a>GL8_draw_bitmap_AL8</STRONG> (Thumb, 212 bytes, Stack size 88 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_AL8))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GL8_draw_bitmap_AL8
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AlphaBlendValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[e2]"></a>GL8_draw_bitmap_ARGB1555</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_ARGB1555))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GL8_draw_bitmap_ARGB1555
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[e3]"></a>GL8_draw_bitmap_ARGB4444</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_ARGB4444))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[e6]"></a>GL8_draw_bitmap_ARGB8888</STRONG> (Thumb, 218 bytes, Stack size 88 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_ARGB8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GL8_draw_bitmap_ARGB8888
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AlphaBlendValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[db]"></a>GL8_draw_bitmap_LUT1</STRONG> (Thumb, 272 bytes, Stack size 52 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_LUT1))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GL8_draw_bitmap_LUT1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[dc]"></a>GL8_draw_bitmap_LUT2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_LUT2))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[dd]"></a>GL8_draw_bitmap_LUT4</STRONG> (Thumb, 128 bytes, Stack size 52 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_LUT4))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GL8_draw_bitmap_LUT4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[de]"></a>GL8_draw_bitmap_LUT8</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_LUT8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GL8_draw_bitmap_LUT8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[df]"></a>GL8_draw_bitmap_RGB332</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_RGB332))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GL8_draw_bitmap_RGB332
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[e0]"></a>GL8_draw_bitmap_RGB565</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_RGB565))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GL8_draw_bitmap_RGB565
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[e4]"></a>GL8_draw_bitmap_RGB888</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_RGB888))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GL8_draw_bitmap_RGB888
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[e1]"></a>GL8_draw_bitmap_XRGB1555</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_XRGB1555))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GL8_draw_bitmap_XRGB1555
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[e5]"></a>GL8_draw_bitmap_XRGB8888</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_XRGB8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GL8_draw_bitmap_XRGB8888
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[d7]"></a>GL8_draw_hline</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gl_mem_8bpp.o(i.GL8_draw_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GL8_draw_hline
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_memset8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[d8]"></a>GL8_draw_vline</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gl_mem_8bpp.o(i.GL8_draw_vline))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GL8_draw_vline &rArr; GUI_memset8_step
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_memset8_step
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[d9]"></a>GL8_fill_rect</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, gl_mem_8bpp.o(i.GL8_fill_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GL8_fill_rect
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_memset8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[d5]"></a>GL8_get_pixel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gl_mem_8bpp.o(i.GL8_get_pixel))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[ec]"></a>GL8_rotate_bitmap</STRONG> (Thumb, 1014 bytes, Stack size 176 bytes, gl_mem_8bpp.o(i.GL8_rotate_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = GL8_rotate_bitmap &rArr; sin &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AlphaBlendValue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[eb]"></a>GL8_scale_bitmap</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, gl_mem_8bpp.o(i.GL8_scale_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GL8_scale_bitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[d3]"></a>GL8_set_addr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gl_mem_8bpp.o(i.GL8_set_addr))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[d4]"></a>GL8_set_pixel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gl_mem_8bpp.o(i.GL8_set_pixel))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[d6]"></a>GL8_xor_pixel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gl_mem_8bpp.o(i.GL8_xor_pixel))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[1a4]"></a>GL_BitBlt</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, gl_bitblt_1.o(i.GL_BitBlt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GL_BitBlt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitBlt
</UL>

<P><STRONG><a name="[1df]"></a>GL_CursorCheck</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gl_cursor.o(i.GL_CursorCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsIntersectRect
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CursorHide
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorCheck
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FlushHandler
</UL>

<P><STRONG><a name="[1e1]"></a>GL_CursorFix</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gl_cursor.o(i.GL_CursorFix))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GL_CursorFix &rArr; _CursorShow &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CursorShow
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorFix
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FlushHandler
</UL>

<P><STRONG><a name="[239]"></a>GL_CursorInit</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, gl_cursor.o(i.GL_CursorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GL_CursorInit &rArr; GUI_GRAM_Alloc &rArr; GUI_VMEM_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GRAM_Alloc
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_memset16
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Startup
</UL>

<P><STRONG><a name="[1fd]"></a>GL_DrawArc</STRONG> (Thumb, 300 bytes, Stack size 80 bytes, gd_arc.o(i.GL_DrawArc))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = GL_DrawArc &rArr; _DrawArc &rArr; sin &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawArc
</UL>

<P><STRONG><a name="[297]"></a>GL_GetCursorPos</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gl_cursor.o(i.GL_GetCursorPos))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCursorPos
</UL>

<P><STRONG><a name="[36a]"></a>GL_MEM_16BPP_Init</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, gl_mem_16bpp.o(i.GL_MEM_16BPP_Init))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X_GUI_Init
</UL>

<P><STRONG><a name="[36b]"></a>GL_MEM_32BPP_Init</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, gl_mem_32bpp.o(i.GL_MEM_32BPP_Init))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X_GUI_Init
</UL>

<P><STRONG><a name="[369]"></a>GL_MEM_8BPP_Init</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, gl_mem_8bpp.o(i.GL_MEM_8BPP_Init))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X_GUI_Init
</UL>

<P><STRONG><a name="[23c]"></a>GL_SetCursorPos</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, gl_cursor.o(i.GL_SetCursorPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GL_SetCursorPos &rArr; _CursorShow &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CursorShow
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CursorHide
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCursorPos
</UL>

<P><STRONG><a name="[23d]"></a>GL_ShowCursor</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gl_cursor.o(i.GL_ShowCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GL_ShowCursor &rArr; _CursorShow &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CursorShow
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CursorHide
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCursor
</UL>

<P><STRONG><a name="[226]"></a>GPU_CopyBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_gpu.o(i.GPU_CopyBits))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_copy_bits
</UL>

<P><STRONG><a name="[227]"></a>GPU_DrawBitmap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_gpu.o(i.GPU_DrawBitmap))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_rotate_bitmap
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_draw_bitmap_XRGB8888
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_draw_bitmap_XRGB1555
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_draw_bitmap_RGB888
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_draw_bitmap_RGB565
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_draw_bitmap_RGB332
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_draw_bitmap_ARGB8888
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_draw_bitmap_ARGB4444
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_draw_bitmap_ARGB1555
</UL>

<P><STRONG><a name="[22a]"></a>GPU_FillRect</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_gpu.o(i.GPU_FillRect))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_fill_rect
</UL>

<P><STRONG><a name="[224]"></a>GPU_FillRectARGB</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_gpu.o(i.GPU_FillRectARGB))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_FillRectARGB
</UL>

<P><STRONG><a name="[22f]"></a>GPU_ScaleBitmap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_gpu.o(i.GPU_ScaleBitmap))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_scale_bitmap
</UL>

<P><STRONG><a name="[23e]"></a>GTP_Execu</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, bsp_touch_gtxx.o(i.GTP_Execu))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GTP_Execu &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; i2c_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Write
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Read
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchDev_GetPoint
</UL>

<P><STRONG><a name="[244]"></a>GTP_Init_Panel</STRONG> (Thumb, 398 bytes, Stack size 328 bytes, bsp_touch_gtxx.o(i.GTP_Init_Panel))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = GTP_Init_Panel &rArr; GTP_Read_Version &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; i2c_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Read_Version
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Write
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Test
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Read
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Get_Info
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Touch_Init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GTP_IRQDisable
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchDev_Init
</UL>

<P><STRONG><a name="[246]"></a>GTP_Read_Version</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, bsp_touch_gtxx.o(i.GTP_Read_Version))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GTP_Read_Version &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; i2c_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Read
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
</UL>

<P><STRONG><a name="[215]"></a>GTP_TouchProcess</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_touch_gtxx.o(i.GTP_TouchProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = GTP_TouchProcess &rArr; Goodix_TS_Work_Func &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; i2c_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goodix_TS_Work_Func
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[1fc]"></a>GUI_AA_Begin</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, gui_aa_core.o(i.GUI_AA_Begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_AA_Begin
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawArc
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRoundRect
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillCircle
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillPolygon
</UL>

<P><STRONG><a name="[1fe]"></a>GUI_AA_End</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gui_aa_core.o(i.GUI_AA_End))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = GUI_AA_End &rArr; _FlushLine &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FlushLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawArc
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRoundRect
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillCircle
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillPolygon
</UL>

<P><STRONG><a name="[16e]"></a>GUI_AlphaBlendColor</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, gui_libc.o(i.GUI_AlphaBlendColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_AlphaBlendColor
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlphaBlendColor
</UL>

<P><STRONG><a name="[233]"></a>GUI_AlphaBlendValue</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_libc.o(i.GUI_AlphaBlendValue))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_rotate_bitmap
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_draw_bitmap_ARGB8888
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_draw_bitmap_AL8
</UL>

<P><STRONG><a name="[287]"></a>GUI_Arch_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_arch.o(i.GUI_Arch_Init))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Startup
</UL>

<P><STRONG><a name="[f5]"></a>GUI_Boot_Interface_Dialog</STRONG> (Thumb, 164 bytes, Stack size 96 bytes, gui_bootinterface.o(i.GUI_Boot_Interface_Dialog))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = GUI_Boot_Interface_Dialog &rArr; ShowWindow &rArr; SetWindowPos &rArr; _SetWindowPos &rArr; _HideWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateWindowEx
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslateMessage
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWindow
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemMetrics
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchMessage
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDefFont
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Thread_Delete
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Thread_Create
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCurThreadHandle
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_desktop.o(i.desktop_proc)
</UL>
<P><STRONG><a name="[1f4]"></a>GUI_ClrInputWindow</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gui_input.o(i.GUI_ClrInputWindow))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyWindow
</UL>

<P><STRONG><a name="[24f]"></a>GUI_CreateDesktop</STRONG> (Thumb, 218 bytes, Stack size 88 bytes, gui_window.o(i.GUI_CreateDesktop))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = GUI_CreateDesktop &rArr; EnableWindow &rArr; InvalidateRect &rArr; _InsertInvRect &rArr; RGN_SubtractRect &rArr; GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableWindow
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemMetrics
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRect
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DesktopStartup
</UL>

<P><STRONG><a name="[250]"></a>GUI_CreateMsgQ</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, gui_message.o(i.GUI_CreateMsgQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_CreateMsgQ &rArr; GUI_SemCreate &rArr; xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitWindow
</UL>

<P><STRONG><a name="[252]"></a>GUI_CreateSurface</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, x_gui.o(i.GUI_CreateSurface))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = GUI_CreateSurface &rArr; GUI_GRAM_Alloc &rArr; GUI_VMEM_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SurfaceInit_XRGB8888
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SurfaceInit_RGB565
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SurfaceInit_RGB332
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SurfaceInit_ARGB8888
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SurfaceInit_ARGB4444
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GRAM_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DisplayInit
</UL>

<P><STRONG><a name="[258]"></a>GUI_Default_FontInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gui_font_port.o(i.GUI_Default_FontInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GUI_Default_FontInit &rArr; XFT_CreateFont &rArr; CreateFont &rArr; GUI_MEM_Alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XFT_CreateFont
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Startup
</UL>

<P><STRONG><a name="[25a]"></a>GUI_DeleteMsgQ</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, gui_message.o(i.GUI_DeleteMsgQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GUI_DeleteMsgQ &rArr; GUI_SemDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WindowCleanup
</UL>

<P><STRONG><a name="[1ef]"></a>GUI_DeleteSurface</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, x_gui.o(i.GUI_DeleteSurface))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GUI_DeleteSurface &rArr; GUI_GRAM_Free &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GRAM_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteDC
</UL>

<P><STRONG><a name="[25d]"></a>GUI_DesktopStartup</STRONG> (Thumb, 120 bytes, Stack size 96 bytes, gui_desktop.o(i.GUI_DesktopStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = GUI_DesktopStartup &rArr; ShowWindow &rArr; SetWindowPos &rArr; _SetWindowPos &rArr; _HideWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslateMessage
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWindow
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCursor
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemMetrics
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDesktop
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Startup
</UL>

<P><STRONG><a name="[25f]"></a>GUI_DisplayInit</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, gui_lcd_port.o(i.GUI_DisplayInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GUI_DisplayInit &rArr; GUI_CreateSurface &rArr; GUI_GRAM_Alloc &rArr; GUI_VMEM_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Printf
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateSurface
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HardInit
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BkLight
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Startup
</UL>

<P><STRONG><a name="[1d8]"></a>GUI_FindClass</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gui_widget.o(i.GUI_FindClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_FindClass &rArr; GUI_wstrncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_wstrncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateWindowEx
</UL>

<P><STRONG><a name="[219]"></a>GUI_FlushHandler</STRONG> (Thumb, 502 bytes, Stack size 160 bytes, gui_window.o(i.GUI_FlushHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = GUI_FlushHandler &rArr; ReleaseDC &rArr; _InsertInvRect &rArr; RGN_SubtractRect &rArr; GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsWindowVisible
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowLong
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractRectEx
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteRgn
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteDC
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateDC
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_CursorFix
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_CursorCheck
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitBlt
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseDC
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDCEx
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateWindow
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPaint
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
</UL>

<P><STRONG><a name="[23a]"></a>GUI_GRAM_Alloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_mem_port.o(i.GUI_GRAM_Alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GUI_GRAM_Alloc &rArr; GUI_VMEM_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_CursorInit
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateSurface
</UL>

<P><STRONG><a name="[25c]"></a>GUI_GRAM_Free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_mem_port.o(i.GUI_GRAM_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GUI_GRAM_Free &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DeleteSurface
</UL>

<P><STRONG><a name="[172]"></a>GUI_GetCurThreadHandle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_gui_freertos.o(i.GUI_GetCurThreadHandle))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_FLASH_Writer
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RES_Writer_Dialog
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Load_Res
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Boot_Interface_Dialog
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitWindow
</UL>

<P><STRONG><a name="[267]"></a>GUI_GetTickCount</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, x_gui_freertos.o(i.GUI_GetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_GetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeekMessage
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInputHandler
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
</UL>

<P><STRONG><a name="[174]"></a>GUI_Init_Extern_Font</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gui_font_port.o(i.GUI_Init_Extern_Font))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = GUI_Init_Extern_Font &rArr; GUI_Init_Extern_Font_2RAM &rArr; SendMessage &rArr; PostMessage &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init_Extern_Font_2RAM
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Load_Res
</UL>

<P><STRONG><a name="[269]"></a>GUI_Init_Extern_Font_2RAM</STRONG> (Thumb, 130 bytes, Stack size 80 bytes, gui_font_port.o(i.GUI_Init_Extern_Font_2RAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = GUI_Init_Extern_Font_2RAM &rArr; SendMessage &rArr; PostMessage &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XFT_CreateFont
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_GetInfo_AbsAddr
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_DevRead
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Alloc
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init_Extern_Font
</UL>

<P><STRONG><a name="[26c]"></a>GUI_InputHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_input_port.o(i.GUI_InputHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = GUI_InputHandler &rArr; GUI_TouchHandler &rArr; MouseInput &rArr; MouseInputHandler &rArr; MouseEventHandler &rArr; SetForegroundWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TouchHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desktop_proc
</UL>

<P><STRONG><a name="[26e]"></a>GUI_InputInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_input_port.o(i.GUI_InputInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = GUI_InputInit &rArr; TouchDev_Init &rArr; GTP_Init_Panel &rArr; GTP_Read_Version &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; i2c_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchDev_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Startup
</UL>

<P><STRONG><a name="[368]"></a>GUI_Input_Init</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, gui_input.o(i.GUI_Input_Init))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X_GUI_Init
</UL>

<P><STRONG><a name="[270]"></a>GUI_KillWindowTimers</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gui_timer.o(i.GUI_KillWindowTimers))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GUI_KillWindowTimers &rArr; GUI_MEM_Free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WindowCleanup
</UL>

<P><STRONG><a name="[1d6]"></a>GUI_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, x_gui.o(i.GUI_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForegroundWindow
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowFromPoint
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetForegroundWindow
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFocus
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDesktopWindow
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCapture
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInputHandler
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCursorPos
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyWindow
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateWindowEx
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCursor
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDesktop
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInput
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCursorPos
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowToTop
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFocus
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCapture
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseCapture
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitWindow
</UL>

<P><STRONG><a name="[275]"></a>GUI_Log_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_log_port.o(i.GUI_Log_Init))
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LowLevelInit
</UL>

<P><STRONG><a name="[17b]"></a>GUI_MEM_Alloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_mem_port.o(i.GUI_MEM_Alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GUI_MEM_Alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateMsgQ
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_font
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectLL_Alloc
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DC_Alloc
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateDC
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFont
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP_Draw
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdFillPolygon
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateWindowEx
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDesktop
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateSurface
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillPolygon
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_wstr_alloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP_DrawEx
</UL>

<P><STRONG><a name="[17c]"></a>GUI_MEM_Free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_mem_port.o(i.GUI_MEM_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GUI_MEM_Free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_KillWindowTimers
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WindowCleanup
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeekMessage
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RemoveWindowMessage
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DeleteMsgQ
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateMsgQ
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__delete_font
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_font
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectLL_Free
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DeleteSurface
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteDC
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFont
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP_Draw
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdFillPolygon
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateWindowEx
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDesktop
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillPolygon
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_wstr_free
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP_DrawEx
</UL>

<P><STRONG><a name="[273]"></a>GUI_MEM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_mem_port.o(i.GUI_MEM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LowLevelInit
</UL>

<P><STRONG><a name="[365]"></a>GUI_Message_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_message.o(i.GUI_Message_Init))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X_GUI_Init
</UL>

<P><STRONG><a name="[278]"></a>GUI_MutexCreate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, x_gui_freertos.o(i.GUI_MutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GUI_MutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X_GUI_Init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_DevInit
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitWindow
</UL>

<P><STRONG><a name="[27a]"></a>GUI_MutexDelete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_gui_freertos.o(i.GUI_MutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GUI_MutexDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WindowCleanup
</UL>

<P><STRONG><a name="[271]"></a>GUI_MutexLock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, x_gui_freertos.o(i.GUI_MutexLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectLL_Free
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectLL_Alloc
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Free
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_DevRead
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Alloc
</UL>

<P><STRONG><a name="[27d]"></a>GUI_MutexUnlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_gui_freertos.o(i.GUI_MutexUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GUI_MutexUnlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectLL_Free
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectLL_Alloc
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Free
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_DevRead
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Alloc
</UL>

<P><STRONG><a name="[218]"></a>GUI_PaintHandler</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, gui_window.o(i.GUI_PaintHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + In Cycle
<LI>Call Chain = GUI_PaintHandler &rArr;  GUI_PaintHandler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsWindowVisible
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawWindowNC
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PaintHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateWindow
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPaint
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PaintHandler
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
</UL>

<P><STRONG><a name="[260]"></a>GUI_Printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_log_port.o(i.GUI_Printf))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectLL_Alloc
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X_GUI_Init
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DisplayInit
</UL>

<P><STRONG><a name="[f0]"></a>GUI_RES_Writer_Dialog</STRONG> (Thumb, 144 bytes, Stack size 96 bytes, gui_res_writer_dialog.o(i.GUI_RES_Writer_Dialog))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = GUI_RES_Writer_Dialog &rArr; ShowWindow &rArr; SetWindowPos &rArr; _SetWindowPos &rArr; _HideWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateWindowEx
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslateMessage
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWindow
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemMetrics
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchMessage
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDefFont
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Thread_Delete
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCurThreadHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_bootinterface.o(i.GUI_Boot_Interface_Dialog)
</UL>
<P><STRONG><a name="[1d4]"></a>GUI_RectLL_Alloc</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, x_gui.o(i.GUI_RectLL_Alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Printf
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexUnlock
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGN_SubtractRect
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertRECT_LL
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRectRgnIndirect
</UL>

<P><STRONG><a name="[1f1]"></a>GUI_RectLL_Free</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, x_gui.o(i.GUI_RectLL_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GUI_RectLL_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexUnlock
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteRgn
</UL>

<P><STRONG><a name="[27f]"></a>GUI_RemoveWindowMessage</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, gui_message.o(i.GUI_RemoveWindowMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GUI_RemoveWindowMessage &rArr; GUI_MEM_Free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowMsgQ
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WindowCleanup
</UL>

<P><STRONG><a name="[251]"></a>GUI_SemCreate</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, x_gui_freertos.o(i.GUI_SemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GUI_SemCreate &rArr; xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateMsgQ
</UL>

<P><STRONG><a name="[25b]"></a>GUI_SemDelete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_gui_freertos.o(i.GUI_SemDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GUI_SemDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DeleteMsgQ
</UL>

<P><STRONG><a name="[282]"></a>GUI_SemPost</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, x_gui_freertos.o(i.GUI_SemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GUI_SemPost &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PostPaintMessage
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PostNCPaintMessage
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PostFlushMessage
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostQuitMessage
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeekMessage
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostCloseMessage
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>

<P><STRONG><a name="[284]"></a>GUI_SemWait</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, x_gui_freertos.o(i.GUI_SemWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GUI_SemWait &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
</UL>

<P><STRONG><a name="[175]"></a>GUI_SetDefFont</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, x_gui.o(i.GUI_SetDefFont))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Startup
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RES_Writer_Dialog
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Load_Res
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Boot_Interface_Dialog
</UL>

<P><STRONG><a name="[289]"></a>GUI_SetScreenSurface</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, x_gui.o(i.GUI_SetScreenSurface))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Startup
</UL>

<P><STRONG><a name="[286]"></a>GUI_Startup</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, gui_startup.o(i.GUI_Startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = GUI_Startup &rArr; GUI_DesktopStartup &rArr; ShowWindow &rArr; SetWindowPos &rArr; _SetWindowPos &rArr; _HideWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Arch_Init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X_GUI_Init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetScreenSurface
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDefFont
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DesktopStartup
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_CursorInit
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LowLevelInit
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_DevInit
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DisplayInit
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_InputInit
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSystem_Init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Default_FontInit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Thread_Entry
</UL>

<P><STRONG><a name="[16f]"></a>GUI_Thread_Create</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, x_gui_freertos.o(i.GUI_Thread_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GUI_Thread_Create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_FLASH_Writer
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Load_Res
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Boot_Interface_Dialog
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desktop_proc
</UL>

<P><STRONG><a name="[173]"></a>GUI_Thread_Delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_gui_freertos.o(i.GUI_Thread_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GUI_Thread_Delete &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_FLASH_Writer
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RES_Writer_Dialog
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Load_Res
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Boot_Interface_Dialog
</UL>

<P><STRONG><a name="[32a]"></a>GUI_TimerHandler</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, gui_timer.o(i.GUI_TimerHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_TimerHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeekMessage
</UL>

<P><STRONG><a name="[367]"></a>GUI_Timer_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_timer.o(i.GUI_Timer_Init))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X_GUI_Init
</UL>

<P><STRONG><a name="[26d]"></a>GUI_TouchHandler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gui_touch_port.o(i.GUI_TouchHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = GUI_TouchHandler &rArr; MouseInput &rArr; MouseInputHandler &rArr; MouseEventHandler &rArr; SetForegroundWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInput
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCursorPos
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchDev_GetPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_InputHandler
</UL>

<P><STRONG><a name="[1d7]"></a>GUI_Unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, x_gui.o(i.GUI_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GUI_Unlock &rArr; GUI_MutexUnlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForegroundWindow
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowFromPoint
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetForegroundWindow
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFocus
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDesktopWindow
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCapture
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInputHandler
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCursorPos
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyWindow
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateWindowEx
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCursor
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDesktop
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInput
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCursorPos
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowToTop
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFocus
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCapture
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseCapture
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitWindow
</UL>

<P><STRONG><a name="[1a6]"></a>GUI_VMEM_Alloc</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gui_mem_port.o(i.GUI_VMEM_Alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GUI_VMEM_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_heap_alloc
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexUnlock
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexLock
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Ignore
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BurnFile
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GRAM_Alloc
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init_Extern_Font_2RAM
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_realloc
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
</UL>

<P><STRONG><a name="[1b1]"></a>GUI_VMEM_Free</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_mem_port.o(i.GUI_VMEM_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_heap_free
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexUnlock
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Ignore
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BurnFile
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GRAM_Free
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_realloc
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>

<P><STRONG><a name="[274]"></a>GUI_VMEM_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gui_mem_port.o(i.GUI_VMEM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GUI_VMEM_Init &rArr; GUI_MutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_heap_init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LowLevelInit
</UL>

<P><STRONG><a name="[366]"></a>GUI_Window_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_window.o(i.GUI_Window_Init))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X_GUI_Init
</UL>

<P><STRONG><a name="[294]"></a>GUI_Yield</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, x_gui_freertos.o(i.GUI_Yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GUI_Yield &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeekMessage
</UL>

<P><STRONG><a name="[322]"></a>GUI_abs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_libc.o(i.GUI_abs))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInputHandler
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdLine
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawLine
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawBoldLine
</UL>

<P><STRONG><a name="[228]"></a>GUI_memset16</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, gui_libc.o(i.GUI_memset16))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_fill_rect
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_draw_hline
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_CursorInit
</UL>

<P><STRONG><a name="[229]"></a>GUI_memset16_step</STRONG> (Thumb, 138 bytes, Stack size 4 bytes, gui_libc.o(i.GUI_memset16_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GUI_memset16_step
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_draw_vline
</UL>

<P><STRONG><a name="[231]"></a>GUI_memset32</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, gui_libc.o(i.GUI_memset32))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL32_fill_rect
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL32_draw_hline
</UL>

<P><STRONG><a name="[232]"></a>GUI_memset32_step</STRONG> (Thumb, 138 bytes, Stack size 4 bytes, gui_libc.o(i.GUI_memset32_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GUI_memset32_step
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL32_draw_vline
</UL>

<P><STRONG><a name="[234]"></a>GUI_memset8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_libc.o(i.GUI_memset8))
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_fill_rect
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_draw_hline
</UL>

<P><STRONG><a name="[235]"></a>GUI_memset8_step</STRONG> (Thumb, 122 bytes, Stack size 4 bytes, gui_libc.o(i.GUI_memset8_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GUI_memset8_step
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_draw_vline
</UL>

<P><STRONG><a name="[1aa]"></a>GUI_msleep</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, x_gui_freertos.o(i.GUI_msleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GUI_msleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Catalog
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Resource
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_Content
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_Catalog
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BurnFile
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BulkErase_GUI
</UL>

<P><STRONG><a name="[1e9]"></a>GUI_wstr_alloc</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gui_libc.o(i.GUI_wstr_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GUI_wstr_alloc &rArr; GUI_MEM_Alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitWindow
</UL>

<P><STRONG><a name="[1e8]"></a>GUI_wstr_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_libc.o(i.GUI_wstr_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GUI_wstr_free &rArr; GUI_MEM_Free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WindowCleanup
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
</UL>

<P><STRONG><a name="[207]"></a>GUI_wstrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gui_libc.o(i.GUI_wstrchr))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
</UL>

<P><STRONG><a name="[1ea]"></a>GUI_wstrlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_libc.o(i.GUI_wstrlen))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
</UL>

<P><STRONG><a name="[263]"></a>GUI_wstrncasecmp</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, gui_libc.o(i.GUI_wstrncasecmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_wstrncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FindClass
</UL>

<P><STRONG><a name="[1eb]"></a>GUI_wstrncpy</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gui_libc.o(i.GUI_wstrncpy))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
</UL>

<P><STRONG><a name="[470]"></a>GetBrushColor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_gdi.o(i.GetBrushColor))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>

<P><STRONG><a name="[295]"></a>GetCapture</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gui_window.o(i.GetCapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GetCapture &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInput
</UL>

<P><STRONG><a name="[296]"></a>GetClientRect</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gui_window.o(i.GetClientRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GetClientRect &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushbutton_paint
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EraseBackgnd
</UL>

<P><STRONG><a name="[1c5]"></a>GetClientRectToScreen</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gui_window.o(i.GetClientRectToScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GetClientRectToScreen &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawWindowNC
</UL>

<P><STRONG><a name="[290]"></a>GetCursorPos</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gui_cursor.o(i.GetCursorPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GetCursorPos &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_GetCursorPos
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TouchHandler
</UL>

<P><STRONG><a name="[19e]"></a>GetDCEx</STRONG> (Thumb, 568 bytes, Stack size 96 bytes, gui_window.o(i.GetDCEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = GetDCEx &rArr; _GetWindowClipRgn &rArr; _CalculateWindowClipRgn &rArr; RGN_SubtractRect &rArr; GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScreenToClient
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClientToScreen
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDC
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DC_Alloc
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowClipRgn
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginPaint
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowDC
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FlushHandler
</UL>

<P><STRONG><a name="[29b]"></a>GetDesktopWindow</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gui_window.o(i.GetDesktopWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GetDesktopWindow &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInput
</UL>

<P><STRONG><a name="[29c]"></a>GetDlgItem</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gui_window.o(i.GetDlgItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GetDlgItem &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>

<P><STRONG><a name="[29d]"></a>GetFocus</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gui_window.o(i.GetFocus))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GetFocus &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>

<P><STRONG><a name="[46e]"></a>GetFont</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_font.o(i.GetFont))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>

<P><STRONG><a name="[46f]"></a>GetFontAveHeight</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gui_font.o(i.GetFontAveHeight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetFontAveHeight
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>

<P><STRONG><a name="[20e]"></a>GetForegroundWindow</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gui_window.o(i.GetForegroundWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GetForegroundWindow &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
</UL>

<P><STRONG><a name="[24e]"></a>GetMessage</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gui_message.o(i.GetMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = GetMessage &rArr; PeekMessage &rArr; UpdateWindow &rArr; GUI_PaintHandler &rArr;  GUI_PaintHandler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowMsgQ
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeekMessage
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemWait
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RES_Writer_Dialog
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Boot_Interface_Dialog
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DesktopStartup
</UL>

<P><STRONG><a name="[1c4]"></a>GetParent</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gui_window.o(i.GetParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GetParent &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NotifyParentEx
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NotifyParent
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseEventHandler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushbutton_paint
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawWindowNC
</UL>

<P><STRONG><a name="[2a5]"></a>GetRGB</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gui_gdi.o(i.GetRGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetRGB
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdVLine
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GradientFillRect
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdHLine
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdFillRect
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FlushLine
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawLine
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawBoldLine
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_circle_pixel
</UL>

<P><STRONG><a name="[24c]"></a>GetSystemMetrics</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, x_gui.o(i.GetSystemMetrics))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RES_Writer_Dialog
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWindow
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDesktop
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Boot_Interface_Dialog
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DesktopStartup
</UL>

<P><STRONG><a name="[208]"></a>GetTextExtent</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, gui_font.o(i.GetTextExtent))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetTextExtent
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC_Unlock
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
</UL>

<P><STRONG><a name="[20b]"></a>GetTextWidth</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, gui_font.o(i.GetTextWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetTextWidth
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC_Unlock
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
</UL>

<P><STRONG><a name="[29f]"></a>GetWindow</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_window.o(i.GetWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GetWindow &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseEventHandler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>

<P><STRONG><a name="[1c9]"></a>GetWindowDC</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_window.o(i.GetWindowDC))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = GetWindowDC &rArr; GetDCEx &rArr; _GetWindowClipRgn &rArr; _CalculateWindowClipRgn &rArr; RGN_SubtractRect &rArr; GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDCEx
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawWindowNC
</UL>

<P><STRONG><a name="[2a0]"></a>GetWindowFromPoint</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gui_window.o(i.GetWindowFromPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GetWindowFromPoint &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowFromPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInput
</UL>

<P><STRONG><a name="[265]"></a>GetWindowLong</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gui_window.o(i.GetWindowLong))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GetWindowLong &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForegroundWindow
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseEventHandler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FlushHandler
</UL>

<P><STRONG><a name="[280]"></a>GetWindowMsgQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_window.o(i.GetWindowMsgQ))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RemoveWindowMessage
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
</UL>

<P><STRONG><a name="[20d]"></a>GetWindowRect</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gui_window.o(i.GetWindowRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GetWindowRect &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseEventHandler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
</UL>

<P><STRONG><a name="[2a4]"></a>GradientFillRect</STRONG> (Thumb, 372 bytes, Stack size 96 bytes, gd_rect.o(i.GradientFillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = GradientFillRect &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdVLine
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdHLine
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRGB
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapRGB
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_pb_rect
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_btn_backgnd
</UL>

<P><STRONG><a name="[248]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32h7xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_PowerState_ON
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
</UL>

<P><STRONG><a name="[196]"></a>HAL_GPIO_Init</STRONG> (Thumb, 442 bytes, Stack size 40 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_PDN_INIT
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_MspInit
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ResetChip
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GTP_IRQEnable
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GTP_IRQDisable
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GPIO_Config
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_GPIO_Config
</UL>

<P><STRONG><a name="[40c]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
</UL>

<P><STRONG><a name="[302]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_PDN_INIT
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ResetChip
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BackLed_Control
</UL>

<P><STRONG><a name="[2a6]"></a>HAL_GetTick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, core_delay.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[2bb]"></a>HAL_InitTick</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, core_delay.o(i.HAL_InitTick))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[2a7]"></a>HAL_LTDC_ConfigLayer</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, stm32h7xx_hal_ltdc.o(i.HAL_LTDC_ConfigLayer), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LayerInit
</UL>

<P><STRONG><a name="[2aa]"></a>HAL_LTDC_Init</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, stm32h7xx_hal_ltdc.o(i.HAL_LTDC_Init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[2ab]"></a>HAL_LTDC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ltdc.o(i.HAL_LTDC_MspInit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
</UL>

<P><STRONG><a name="[2f7]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GTP_IRQDisable
</UL>

<P><STRONG><a name="[199]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_MspInit
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GTP_IRQEnable
</UL>

<P><STRONG><a name="[198]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_MspInit
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GTP_IRQEnable
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GTP_IRQDisable
</UL>

<P><STRONG><a name="[182]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[2ad]"></a>HAL_QSPI_AutoPolling</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, stm32h7xx_hal_qspi.o(i.HAL_QSPI_AutoPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_QSPI_AutoPolling &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_AutoPollingMemReady
</UL>

<P><STRONG><a name="[189]"></a>HAL_QSPI_Command</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, stm32h7xx_hal_qspi.o(i.HAL_QSPI_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Write
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Read
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_GetStatus
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Erase_Chip
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ResetMemory
</UL>

<P><STRONG><a name="[2b0]"></a>HAL_QSPI_Init</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, stm32h7xx_hal_qspi.o(i.HAL_QSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_QSPI_Init &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_SetTimeout
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Init
</UL>

<P><STRONG><a name="[2b1]"></a>HAL_QSPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(i.HAL_QSPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[18c]"></a>HAL_QSPI_Receive</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, stm32h7xx_hal_qspi.o(i.HAL_QSPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_QSPI_Receive &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Read
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_GetStatus
</UL>

<P><STRONG><a name="[2b2]"></a>HAL_QSPI_SetTimeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(i.HAL_QSPI_SetTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[18f]"></a>HAL_QSPI_Transmit</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, stm32h7xx_hal_qspi.o(i.HAL_QSPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_QSPI_Transmit &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Write
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
</UL>

<P><STRONG><a name="[2b3]"></a>HAL_RCCEx_GetD1SysClockFreq</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetD1SysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[2b5]"></a>HAL_RCCEx_GetD3PCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetD3PCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[361]"></a>HAL_RCCEx_GetPLL2ClockFreq</STRONG> (Thumb, 384 bytes, Stack size 12 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPLL2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCCEx_GetPLL2ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[362]"></a>HAL_RCCEx_GetPLL3ClockFreq</STRONG> (Thumb, 384 bytes, Stack size 12 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPLL3ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCCEx_GetPLL3ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[2b7]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 2536 bytes, Stack size 40 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Config
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Init
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClockConfig
</UL>

<P><STRONG><a name="[2ba]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[2b6]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD1SysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[2bc]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[2bd]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[2b4]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 372 bytes, Stack size 20 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD1SysClockFreq
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[2be]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1396 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[2d6]"></a>HAL_SDEx_Read_DMADoubleBuffer0CpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SDEx_Read_DMADoubleBuffer0CpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[2d4]"></a>HAL_SDEx_Read_DMADoubleBuffer1CpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SDEx_Read_DMADoubleBuffer1CpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[2d5]"></a>HAL_SDEx_Write_DMADoubleBuffer0CpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SDEx_Write_DMADoubleBuffer0CpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[2d3]"></a>HAL_SDEx_Write_DMADoubleBuffer1CpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SDEx_Write_DMADoubleBuffer1CpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[2bf]"></a>HAL_SDRAM_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32h7xx_hal_sdram.o(i.HAL_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_SDRAM_Init &rArr; FMC_SDRAM_Timing_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Timing_Init
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Init
</UL>

<P><STRONG><a name="[2c0]"></a>HAL_SDRAM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sdram.o(i.HAL_SDRAM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[2c3]"></a>HAL_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32h7xx_hal_sdram.o(i.HAL_SDRAM_ProgramRefreshRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_InitSequence
</UL>

<P><STRONG><a name="[2c5]"></a>HAL_SDRAM_SendCommand</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32h7xx_hal_sdram.o(i.HAL_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_InitSequence
</UL>

<P><STRONG><a name="[195]"></a>HAL_SD_ConfigWideBusOperation</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_ConfigWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[2ce]"></a>HAL_SD_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[350]"></a>HAL_SD_GetCardCSD</STRONG> (Thumb, 476 bytes, Stack size 20 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_GetCardCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[3db]"></a>HAL_SD_GetCardInfo</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_GetCardInfo))
<BR><BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[2ca]"></a>HAL_SD_GetCardState</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[2cc]"></a>HAL_SD_IRQHandler</STRONG> (Thumb, 522 bytes, Stack size 24 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_SD_IRQHandler &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDEx_Write_DMADoubleBuffer1CpltCallback
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDEx_Write_DMADoubleBuffer0CpltCallback
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDEx_Read_DMADoubleBuffer1CpltCallback
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDEx_Read_DMADoubleBuffer0CpltCallback
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write_IT
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read_IT
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_TxCpltCallback
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC1_IRQHandler
</UL>

<P><STRONG><a name="[194]"></a>HAL_SD_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = HAL_SD_Init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[2d8]"></a>HAL_SD_InitCard</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_SD_InitCard &rArr; SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_PowerState_ON
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[2d7]"></a>HAL_SD_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[2dc]"></a>HAL_SD_ReadBlocks_DMA</STRONG> (Thumb, 250 bytes, Stack size 56 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_SD_ReadBlocks_DMA &rArr; SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[2d0]"></a>HAL_SD_RxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_sdio_sd.o(i.HAL_SD_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[2cf]"></a>HAL_SD_TxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_sdio_sd.o(i.HAL_SD_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[2e1]"></a>HAL_SD_WriteBlocks_DMA</STRONG> (Thumb, 278 bytes, Stack size 64 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[2e4]"></a>HAL_UART_Init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Config
</UL>

<P><STRONG><a name="[2e5]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[2e9]"></a>HAL_UART_Transmit</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1a1]"></a>HDC_Lock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_gdi.o(i.HDC_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VLine
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLine
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextWidth
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextExtent
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextOut
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitBlt
</UL>

<P><STRONG><a name="[1a5]"></a>HDC_Unlock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_gdi.o(i.HDC_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VLine
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLine
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextWidth
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextExtent
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextOut
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitBlt
</UL>

<P><STRONG><a name="[2eb]"></a>HLine</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, gd_line.o(i.HLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = HLine &rArr; Line &rArr; solid_line &rArr; _FillPolygon &rArr; GUI_AA_End &rArr; _FlushLine &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsEnableAA
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC_Unlock
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC_Lock
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawRoundRectEx
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_track
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushbutton_paint
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_window_frame
</UL>

<P><STRONG><a name="[24a]"></a>I2C_GTP_IRQDisable</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, bsp_i2c_touch.o(i.I2C_GTP_IRQDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_GTP_IRQDisable &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
</UL>

<P><STRONG><a name="[2f8]"></a>I2C_GTP_IRQEnable</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, bsp_i2c_touch.o(i.I2C_GTP_IRQEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_GTP_IRQEnable &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Touch_Init
</UL>

<P><STRONG><a name="[2f9]"></a>I2C_ReadBytes</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bsp_i2c_touch.o(i.I2C_ReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_ReadBytes &rArr; i2c_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Transfer
</UL>

<P><STRONG><a name="[301]"></a>I2C_ResetChip</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, bsp_i2c_touch.o(i.I2C_ResetChip))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_ResetChip &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Touch_Init
</UL>

<P><STRONG><a name="[245]"></a>I2C_Touch_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_i2c_touch.o(i.I2C_Touch_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C_Touch_Init &rArr; I2C_ResetChip &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ResetChip
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GTP_IRQEnable
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
</UL>

<P><STRONG><a name="[304]"></a>I2C_WriteBytes</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, bsp_i2c_touch.o(i.I2C_WriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WriteBytes &rArr; i2c_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Transfer
</UL>

<P><STRONG><a name="[1c0]"></a>InflateRect</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gui_region.o(i.InflateRect))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_char
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vscroll_rect
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hscroll_rect
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushbutton_paint
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_btn_backgnd
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawFocusRect
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_window_frame
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
</UL>

<P><STRONG><a name="[1bc]"></a>InflateRectEx</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, gui_region.o(i.InflateRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = InflateRectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWindowHit
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill3DRect
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCaptionRect
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWindowLong
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowSize
</UL>

<P><STRONG><a name="[1d2]"></a>InitDC</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, gui_gdi.o(i.InitDC))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = InitDC &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateDC
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDCEx
</UL>

<P><STRONG><a name="[305]"></a>InsertRECT_LL</STRONG> (Thumb, 222 bytes, Stack size 96 bytes, gui_region.o(i.InsertRECT_LL))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = InsertRECT_LL &rArr; GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectLL_Alloc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsIntersectRect
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractRectEx
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCoveredRect
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RECT_LLAddRect
</UL>

<P><STRONG><a name="[307]"></a>IntersectRect</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, gui_region.o(i.IntersectRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsIntersectRect
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractRectEx
</UL>

<P><STRONG><a name="[1dd]"></a>InvalidateRect</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, gui_window.o(i.InvalidateRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = InvalidateRect &rArr; _InsertInvRect &rArr; RGN_SubtractRect &rArr; GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PostPaintMessage
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertInvRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableWindow
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateWindowEx
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDesktop
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HideWindow
</UL>

<P><STRONG><a name="[306]"></a>IsCoveredRect</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gui_region.o(i.IsCoveredRect))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractRectEx
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGN_SubtractRect
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertRECT_LL
</UL>

<P><STRONG><a name="[378]"></a>IsEnableAlpha</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_gdi.o(i.IsEnableAlpha))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdVLine
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdHLine
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdFillRect
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FlushLine
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdSetPixel
</UL>

<P><STRONG><a name="[308]"></a>IsEnableDragWindow</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gui_window.o(i.IsEnableDragWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = IsEnableDragWindow &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseEventHandler
</UL>

<P><STRONG><a name="[1f7]"></a>IsHWND</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_window.o(i.IsHWND))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslateMessage
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchMessage
</UL>

<P><STRONG><a name="[19b]"></a>IsMemDC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_gdi.o(i.IsMemDC))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
</UL>

<P><STRONG><a name="[333]"></a>IsRectEmpty</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gui_region.o(i.IsRectEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGN_SubtractRect
</UL>

<P><STRONG><a name="[309]"></a>IsWindowEnabled</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gui_window.o(i.IsWindowEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = IsWindowEnabled &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseEventHandler
</UL>

<P><STRONG><a name="[30a]"></a>Is_Ignore</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, backend_res_writer.o(i.Is_Ignore))
<BR><BR>[Stack]<UL><LI>Max Depth = 5108<LI>Call Chain = Is_Ignore &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Free
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Alloc
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Catalog
</UL>

<P><STRONG><a name="[30f]"></a>LCD_BackLed_Control</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bsp_lcd.o(i.LCD_BackLed_Control))
<BR><BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BkLight
</UL>

<P><STRONG><a name="[262]"></a>LCD_BkLight</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_lcd_port.o(i.LCD_BkLight))
<BR><BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BackLed_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DisplayInit
</UL>

<P><STRONG><a name="[310]"></a>LCD_ClockConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bsp_lcd.o(i.LCD_ClockConfig), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[261]"></a>LCD_HardInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_lcd_port.o(i.LCD_HardInit))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DisplayInit
</UL>

<P><STRONG><a name="[312]"></a>LCD_Init</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, bsp_lcd.o(i.LCD_Init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LayerInit
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClockConfig
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
</UL>

<P><STRONG><a name="[313]"></a>LCD_LayerInit</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, bsp_lcd.o(i.LCD_LayerInit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[184]"></a>LED_GPIO_Config</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, bsp_led.o(i.LED_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LED_GPIO_Config &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[2ec]"></a>Line</STRONG> (Thumb, 822 bytes, Stack size 80 bytes, gd_line.o(i.Line))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = Line &rArr; solid_line &rArr; _FillPolygon &rArr; GUI_AA_End &rArr; _FlushLine &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPixel
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC_Unlock
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC_Lock
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solid_line
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VLine
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLine
</UL>

<P><STRONG><a name="[435]"></a>MakeProgressRect</STRONG> (Thumb, 328 bytes, Stack size 0 bytes, gui_region.o(i.MakeProgressRect))
<BR><BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
</UL>

<P><STRONG><a name="[1ad]"></a>Make_Catalog</STRONG> (Thumb, 606 bytes, Stack size 4264 bytes, backend_res_writer.o(i.Make_Catalog))
<BR><BR>[Stack]<UL><LI>Max Depth = 13460 + In Cycle
<LI>Call Chain = Make_Catalog &rArr;  Make_Catalog (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Catalog
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Ignore
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWindowText
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_msleep
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Catalog
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BurnFile
</UL>

<P><STRONG><a name="[220]"></a>MapARGB8888</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_gdi.o(i.MapARGB8888))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill3DRect
</UL>

<P><STRONG><a name="[179]"></a>MapRGB</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gui_gdi.o(i.MapRGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MapRGB
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GradientFillRect
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP_Draw
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawFocusRect
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desktop_proc
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EraseBackgnd
</UL>

<P><STRONG><a name="[17d]"></a>MapXRGB8888</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_gdi.o(i.MapXRGB8888))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_track
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_page
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_btn
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_pb_rect
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushbutton_paint
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_btn_backgnd
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_window_frame
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP_DrawEx
</UL>

<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[28f]"></a>MouseInput</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, gui_input.o(i.MouseInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = MouseInput &rArr; MouseInputHandler &rArr; MouseEventHandler &rArr; SetForegroundWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsWindowVisible
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowFromPoint
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDesktopWindow
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCapture
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWindowHit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInputHandler
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCursorPos
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TouchHandler
</UL>

<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[323]"></a>NotifyParent</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, gui_message.o(i.NotifyParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = NotifyParent &rArr; SendMessage &rArr; PostMessage &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParent
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>

<P><STRONG><a name="[324]"></a>NotifyParentEx</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gui_message.o(i.NotifyParentEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = NotifyParentEx &rArr; SendMessage &rArr; PostMessage &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParent
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>

<P><STRONG><a name="[3e7]"></a>OffsetRect</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gui_region.o(i.OffsetRect))
<BR><BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_pb_rect
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushbutton_paint
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_btn_backgnd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>

<P><STRONG><a name="[325]"></a>PNG_Close</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lodepng_app.o(i.PNG_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PNG_Close &rArr; lodepng_free &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>

<P><STRONG><a name="[46d]"></a>PNG_GetBitmap</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, lodepng_app.o(i.PNG_GetBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PNG_GetBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>

<P><STRONG><a name="[326]"></a>PNG_Open</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, lodepng_app.o(i.PNG_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = PNG_Open &rArr; lodepng_decode_memory &rArr; lodepng_decode &rArr; decodeGeneric &rArr; readChunk_iTXt &rArr; zlib_decompress &rArr; lodepng_zlib_decompress &rArr; inflate &rArr; lodepng_inflate &rArr; lodepng_inflatev &rArr; inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; uivector_resizev &rArr; uivector_resize &rArr; uivector_reserve &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode_memory
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABGR2ARGB
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>

<P><STRONG><a name="[29e]"></a>PeekMessage</STRONG> (Thumb, 390 bytes, Stack size 32 bytes, gui_message.o(i.PeekMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = PeekMessage &rArr; UpdateWindow &rArr; GUI_PaintHandler &rArr;  GUI_PaintHandler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WindowCleanup
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateWindow
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TimerHandler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Yield
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemPost
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
</UL>

<P><STRONG><a name="[32b]"></a>PolyLine</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, gd_line.o(i.PolyLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = PolyLine &rArr; gdLine &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdLine
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>

<P><STRONG><a name="[31f]"></a>PostCloseMessage</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gui_message.o(i.PostCloseMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PostCloseMessage &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseEventHandler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>

<P><STRONG><a name="[1dc]"></a>PostMessage</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, gui_message.o(i.PostMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = PostMessage &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForegroundWindow
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseEventHandler
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableWindow
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateWindowEx
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDesktop
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInput
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFocus
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowWindow
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HideWindow
</UL>

<P><STRONG><a name="[1ed]"></a>PostQuitMessage</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gui_message.o(i.PostQuitMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PostQuitMessage &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsChild
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
</UL>

<P><STRONG><a name="[32e]"></a>PtInRect</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_region.o(i.PtInRect))
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PtInRect
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>

<P><STRONG><a name="[32f]"></a>QSPI_FLASH_Init</STRONG> (Thumb, 324 bytes, Stack size 248 bytes, bsp_qspi_flash.o(i.QSPI_FLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = QSPI_FLASH_Init &rArr; BSP_QSPI_Init &rArr; QSPI_ResetMemory &rArr; QSPI_AutoPollingMemReady &rArr; HAL_QSPI_AutoPolling &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_DevInit
</UL>

<P><STRONG><a name="[330]"></a>RECT_LLAddRect</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_region.o(i.RECT_LLAddRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = RECT_LLAddRect &rArr; InsertRECT_LL &rArr; GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertRECT_LL
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertInvRect
</UL>

<P><STRONG><a name="[28a]"></a>RES_DevInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gui_resource_port.o(i.RES_DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = RES_DevInit &rArr; QSPI_FLASH_Init &rArr; BSP_QSPI_Init &rArr; QSPI_ResetMemory &rArr; QSPI_AutoPollingMemReady &rArr; HAL_QSPI_AutoPolling &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Startup
</UL>

<P><STRONG><a name="[26b]"></a>RES_DevRead</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, gui_resource_port.o(i.RES_DevRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RES_DevRead &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Read
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexUnlock
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_GetOffset
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_GetInfo_AbsAddr
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init_Extern_Font_2RAM
</UL>

<P><STRONG><a name="[26a]"></a>RES_GetInfo_AbsAddr</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, gui_resource_port.o(i.RES_GetInfo_AbsAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = RES_GetInfo_AbsAddr &rArr; RES_DevRead &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_strncasecmp
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_strlen
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_DevRead
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init_Extern_Font_2RAM
</UL>

<P><STRONG><a name="[1bd]"></a>RES_GetOffset</STRONG> (Thumb, 66 bytes, Stack size 72 bytes, gui_resource_port.o(i.RES_GetOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = RES_GetOffset &rArr; RES_DevRead &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_strncasecmp
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_strlen
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_DevRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Resource
</UL>

<P><STRONG><a name="[3e5]"></a>RGB32_AVG</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, gui_core.o(i.RGB32_AVG))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RGB32_AVG
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_track
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_page
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_btn
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushbutton_paint
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_btn_backgnd
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_window_frame
</UL>

<P><STRONG><a name="[212]"></a>RGB32_Offset</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, gui_core.o(i.RGB32_Offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RGB32_Offset
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_track
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_pb_rect
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushbutton_paint
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_btn_backgnd
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_window_frame
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
</UL>

<P><STRONG><a name="[1c8]"></a>RGN_SubtractRect</STRONG> (Thumb, 238 bytes, Stack size 104 bytes, gui_region.o(i.RGN_SubtractRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = RGN_SubtractRect &rArr; GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectLL_Alloc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsIntersectRect
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractRectEx
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRectEmpty
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCoveredRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawWindowNC
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalculateWindowClipRgn
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertInvRect
</UL>

<P><STRONG><a name="[1b2]"></a>Read_CatalogInfo</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, backend_res_writer.o(i.Read_CatalogInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 5108<LI>Call Chain = Read_CatalogInfo &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Resource
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_Content
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_Catalog
</UL>

<P><STRONG><a name="[334]"></a>ReleaseCapture</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_window.o(i.ReleaseCapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ReleaseCapture &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>

<P><STRONG><a name="[1cd]"></a>ReleaseDC</STRONG> (Thumb, 368 bytes, Stack size 136 bytes, gui_window.o(i.ReleaseDC))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ReleaseDC &rArr; _InsertInvRect &rArr; RGN_SubtractRect &rArr; GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PostFlushMessage
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsWindowVisible
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractRectEx
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScreenToClient
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteDC
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindow
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertInvRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPaint
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawWindowNC
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FlushHandler
</UL>

<P><STRONG><a name="[3b]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.SDMMC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SDMMC1_IRQHandler &rArr; HAL_SD_IRQHandler &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[336]"></a>SDMMC_CmdAppCommand</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdAppCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SDMMC_CmdAppCommand &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[339]"></a>SDMMC_CmdAppOperCommand</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdAppOperCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDMMC_CmdAppOperCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp3
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[2de]"></a>SDMMC_CmdBlockLength</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdBlockLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[33b]"></a>SDMMC_CmdBusWidth</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdBusWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SDMMC_CmdBusWidth &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>

<P><STRONG><a name="[33c]"></a>SDMMC_CmdGoIdleState</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdGoIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDMMC_CmdGoIdleState
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdError
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[33e]"></a>SDMMC_CmdOperCond</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdOperCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDMMC_CmdOperCond
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp7
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[2df]"></a>SDMMC_CmdReadMultiBlock</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdReadMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SDMMC_CmdReadMultiBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[2e0]"></a>SDMMC_CmdReadSingleBlock</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdReadSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[340]"></a>SDMMC_CmdSelDesel</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdSelDesel))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SDMMC_CmdSelDesel &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[341]"></a>SDMMC_CmdSendCID</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdSendCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDMMC_CmdSendCID
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[343]"></a>SDMMC_CmdSendCSD</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdSendCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDMMC_CmdSendCSD
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[344]"></a>SDMMC_CmdSendSCR</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdSendSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[345]"></a>SDMMC_CmdSendStatus</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
</UL>

<P><STRONG><a name="[346]"></a>SDMMC_CmdSetRelAdd</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdSetRelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[2cd]"></a>SDMMC_CmdStopTransfer</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdStopTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SDMMC_CmdStopTransfer &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[2e2]"></a>SDMMC_CmdWriteMultiBlock</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdWriteMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SDMMC_CmdWriteMultiBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[2e3]"></a>SDMMC_CmdWriteSingleBlock</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdWriteSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[2dd]"></a>SDMMC_ConfigData</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_ConfigData))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[349]"></a>SDMMC_GetCommandResponse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_GetCommandResponse))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
</UL>

<P><STRONG><a name="[34f]"></a>SDMMC_GetPowerState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[348]"></a>SDMMC_GetResponse</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_GetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMC_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>

<P><STRONG><a name="[2c9]"></a>SDMMC_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDMMC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[2d9]"></a>SDMMC_PowerState_ON</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_PowerState_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDMMC_PowerState_ON &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[34e]"></a>SDMMC_ReadFIFO</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_ReadFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read_IT
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[337]"></a>SDMMC_SendCommand</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_SendCommand))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[351]"></a>SDMMC_WriteFIFO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_WriteFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write_IT
</UL>

<P><STRONG><a name="[183]"></a>SDRAM_Init</STRONG> (Thumb, 144 bytes, Stack size 240 bytes, bsp_sdram.o(i.SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = SDRAM_Init &rArr; SDRAM_GPIO_Config &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_InitSequence
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[1ac]"></a>SPI_FLASH_BulkErase_GUI</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, bsp_qspi_flash.o(i.SPI_FLASH_BulkErase_GUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SPI_FLASH_BulkErase_GUI &rArr; BSP_QSPI_Erase_Chip &rArr; QSPI_WriteEnable &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWindowText
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_msleep
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_GetStatus
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Erase_Chip
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TIMEOUT_UserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BurnFile
</UL>

<P><STRONG><a name="[352]"></a>SPI_FLASH_WriteEnable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_qspi_flash.o(i.SPI_FLASH_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SPI_FLASH_WriteEnable &rArr; QSPI_WriteEnable &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BulkErase_GUI
</UL>

<P><STRONG><a name="[31e]"></a>ScreenToClient</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gui_window.o(i.ScreenToClient))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ScreenToClient &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScreenToClient
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseEventHandler
</UL>

<P><STRONG><a name="[210]"></a>ScreenToWindow</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gui_window.o(i.ScreenToWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ScreenToWindow &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInputHandler
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
</UL>

<P><STRONG><a name="[171]"></a>SendMessage</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, gui_message.o(i.SendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SendMessage &rArr; PostMessage &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowMsgQ
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemWait
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemPost
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCurThreadHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NotifyParentEx
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NotifyParent
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableWindow
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_FLASH_Writer
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Catalog
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Resource
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_Content
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_Catalog
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushbutton_paint
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWindowText
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BulkErase_GUI
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyWindow
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateWindowEx
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Load_Res
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDesktop
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init_Extern_Font_2RAM
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawWindowNC
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseDC
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDCEx
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendMessage_WM_SIZE_AllChild
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendMessage_WM_MOVE_AllChild
</UL>

<P><STRONG><a name="[1e4]"></a>SetBrushColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_gdi.o(i.SetBrushColor))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_track
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_btn
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_pb_rect
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushbutton_paint
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_btn_backgnd
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desktop_proc
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EraseBackgnd
</UL>

<P><STRONG><a name="[354]"></a>SetCapture</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gui_window.o(i.SetCapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SetCapture &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>

<P><STRONG><a name="[320]"></a>SetCursorPos</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gui_cursor.o(i.SetCursorPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SetCursorPos &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetCursorPos
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInput
</UL>

<P><STRONG><a name="[355]"></a>SetFocus</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, gui_window.o(i.SetFocus))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SetFocus &rArr; PostMessage &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>

<P><STRONG><a name="[375]"></a>SetFont</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gui_font.o(i.SetFont))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EraseBackgnd
</UL>

<P><STRONG><a name="[1de]"></a>SetForegroundWindow</STRONG> (Thumb, 368 bytes, Stack size 56 bytes, gui_window.o(i.SetForegroundWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = SetForegroundWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PostPaintMessage
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowLong
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsIntersectRect
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowToTop
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindow
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowClipFlag
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertInvRect
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseEventHandler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateWindowEx
</UL>

<P><STRONG><a name="[213]"></a>SetPenColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_gdi.o(i.SetPenColor))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_track
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_btn
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushbutton_paint
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_btn_backgnd
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_window_frame
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
</UL>

<P><STRONG><a name="[315]"></a>SetPixel</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd_pixel.o(i.SetPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SetPixel &rArr; gdSetPixel &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdSetPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawRoundRect1
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FlushLine
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line
</UL>

<P><STRONG><a name="[433]"></a>SetRectEmpty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_region.o(i.SetRectEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_vscroll_by_value
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_hscroll_by_value
</UL>

<P><STRONG><a name="[211]"></a>SetTextColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_gdi.o(i.SetTextColor))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushbutton_paint
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EraseBackgnd
</UL>

<P><STRONG><a name="[359]"></a>SetTimer</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, gui_timer.o(i.SetTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SetTimer &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desktop_proc
</UL>

<P><STRONG><a name="[35a]"></a>SetWindowLong</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, gui_window.o(i.SetWindowLong))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SetWindowLong &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflateRectEx
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>

<P><STRONG><a name="[1e7]"></a>SetWindowPos</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, gui_window.o(i.SetWindowPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = SetWindowPos &rArr; _SetWindowPos &rArr; _HideWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWindow
</UL>

<P><STRONG><a name="[1a9]"></a>SetWindowText</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_window.o(i.SetWindowText))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SetWindowText &rArr; SendMessage &rArr; PostMessage &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Catalog
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Resource
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_Content
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_Catalog
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BurnFile
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BulkErase_GUI
</UL>

<P><STRONG><a name="[25e]"></a>ShowCursor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gui_cursor.o(i.ShowCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ShowCursor &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DesktopStartup
</UL>

<P><STRONG><a name="[1f3]"></a>ShowWindow</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, gui_window.o(i.ShowWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = ShowWindow &rArr; SetWindowPos &rArr; _SetWindowPos &rArr; _HideWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemMetrics
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWindowPos
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowWindow
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HideWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RES_Writer_Dialog
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyWindow
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Boot_Interface_Dialog
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DesktopStartup
</UL>

<P><STRONG><a name="[264]"></a>SubtractRectEx</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, gui_region.o(i.SubtractRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SubtractRectEx &rArr; IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCoveredRect
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntersectRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGN_SubtractRect
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertRECT_LL
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseDC
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FlushHandler
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
</UL>

<P><STRONG><a name="[255]"></a>SurfaceInit_ARGB4444</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, surface_argb4444.o(i.SurfaceInit_ARGB4444))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SurfaceInit_ARGB4444
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateSurface
</UL>

<P><STRONG><a name="[257]"></a>SurfaceInit_ARGB8888</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, surface_argb8888.o(i.SurfaceInit_ARGB8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SurfaceInit_ARGB8888
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateSurface
</UL>

<P><STRONG><a name="[253]"></a>SurfaceInit_RGB332</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, surface_rgb332.o(i.SurfaceInit_RGB332))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SurfaceInit_RGB332
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateSurface
</UL>

<P><STRONG><a name="[254]"></a>SurfaceInit_RGB565</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, surface_rgb565.o(i.SurfaceInit_RGB565))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SurfaceInit_RGB565
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateSurface
</UL>

<P><STRONG><a name="[256]"></a>SurfaceInit_XRGB8888</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, surface_xrgb8888.o(i.SurfaceInit_XRGB8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SurfaceInit_XRGB8888
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateSurface
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>SystemInit</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, system_stm32h7xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[360]"></a>TextOut</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, gd_text.o(i.TextOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TextOut &rArr; _DrawString &rArr; _DrawChar
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawString
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC_Unlock
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EraseBackgnd
</UL>

<P><STRONG><a name="[21f]"></a>ToARGB</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_gdi.o(i.ToARGB))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill3DRect
</UL>

<P><STRONG><a name="[28e]"></a>TouchDev_GetPoint</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gui_touch_port.o(i.TouchDev_GetPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TouchDev_GetPoint &rArr; GTP_Execu &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; i2c_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Execu
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TouchHandler
</UL>

<P><STRONG><a name="[26f]"></a>TouchDev_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_touch_port.o(i.TouchDev_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = TouchDev_Init &rArr; GTP_Init_Panel &rArr; GTP_Read_Version &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; i2c_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_InputInit
</UL>

<P><STRONG><a name="[24d]"></a>TranslateMessage</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gui_message.o(i.TranslateMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TranslateMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHWND
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RES_Writer_Dialog
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Boot_Interface_Dialog
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DesktopStartup
</UL>

<P><STRONG><a name="[2e7]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[2e8]"></a>UART_CheckIdleState</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[2e6]"></a>UART_SetConfig</STRONG> (Thumb, 1846 bytes, Stack size 64 bytes, stm32h7xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = UART_SetConfig &rArr; HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[2ea]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[185]"></a>UARTx_Config</STRONG> (Thumb, 144 bytes, Stack size 232 bytes, bsp_usart.o(i.UARTx_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = UARTx_Config &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[329]"></a>UpdateWindow</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gui_window.o(i.UpdateWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = UpdateWindow &rArr; GUI_PaintHandler &rArr;  GUI_PaintHandler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PaintHandler
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FlushHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeekMessage
</UL>

<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[363]"></a>VLine</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, gd_line.o(i.VLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = VLine &rArr; Line &rArr; solid_line &rArr; _FillPolygon &rArr; GUI_AA_End &rArr; _FlushLine &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdVLine
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsEnableAA
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC_Unlock
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC_Lock
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawRoundRectEx
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_track
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_window_frame
</UL>

<P><STRONG><a name="[197]"></a>WIFI_PDN_INIT</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, bsp_sdio_sd.o(i.WIFI_PDN_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WIFI_PDN_INIT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_MspInit
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSystem_Init
</UL>

<P><STRONG><a name="[19c]"></a>WIN_Lock</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gui_window.o(i.WIN_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateWindow
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostQuitMessage
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeekMessage
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForegroundWindow
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenToWindow
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenToClient
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsWindowEnabled
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEnableDragWindow
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowRect
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowLong
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowFromPoint
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindow
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParent
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWindowHit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostCloseMessage
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPaint
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableWindow
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginPaint
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDlgItem
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyWindow
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateWindowEx
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWindow
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClientRect
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWindowPos
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWindowLong
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFocus
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseDC
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRect
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDCEx
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClientRectToScreen
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowClipFlag
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
</UL>

<P><STRONG><a name="[19f]"></a>WIN_Unlock</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gui_window.o(i.WIN_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WIN_Unlock &rArr; GUI_Unlock &rArr; GUI_MutexUnlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateWindow
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostQuitMessage
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeekMessage
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForegroundWindow
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenToWindow
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenToClient
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsWindowEnabled
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEnableDragWindow
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowRect
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowLong
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowFromPoint
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindow
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParent
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWindowHit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostCloseMessage
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPaint
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableWindow
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginPaint
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDlgItem
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyWindow
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateWindowEx
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWindow
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClientRect
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWindowPos
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWindowLong
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFocus
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseDC
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRect
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDCEx
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClientRectToScreen
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowClipFlag
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
</UL>

<P><STRONG><a name="[259]"></a>XFT_CreateFont</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_font_xft.o(i.XFT_CreateFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = XFT_CreateFont &rArr; CreateFont &rArr; GUI_MEM_Alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFont
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init_Extern_Font_2RAM
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Default_FontInit
</UL>

<P><STRONG><a name="[288]"></a>X_GUI_Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, x_gui.o(i.X_GUI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = X_GUI_Init &rArr; GUI_MutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Window_Init
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Timer_Init
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Message_Init
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Input_Init
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_MEM_8BPP_Init
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_MEM_32BPP_Init
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_MEM_16BPP_Init
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDI_Init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Printf
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Startup
</UL>

<P><STRONG><a name="[1c1]"></a>XorPixel</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, gd_pixel.o(i.XorPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = XorPixel &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PosInRgn
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawFocusRect
</UL>

<P><STRONG><a name="[36d]"></a>_CalculateWindowClipRgn</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, gui_window.o(i._CalculateWindowClipRgn))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _CalculateWindowClipRgn &rArr; RGN_SubtractRect &rArr; GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGN_SubtractRect
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRectRgnIndirect
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowClipRgn
</UL>

<P><STRONG><a name="[299]"></a>_ClientToScreen</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gui_window.o(i._ClientToScreen))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LPtoDP
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDCEx
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowSize
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertInvRect
</UL>

<P><STRONG><a name="[1ba]"></a>_CopyRect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_region.o(i._CopyRect))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWindowHit
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdFillRect
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetDrawRect
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitmap
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCloseBoxRect
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCaptionRect
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWindowLong
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDCEx
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowSize
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HideWindow
</UL>

<P><STRONG><a name="[20c]"></a>_DrawChar</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, gui_font.o(i._DrawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawString
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
</UL>

<P><STRONG><a name="[204]"></a>_DrawRoundRect1</STRONG> (Thumb, 382 bytes, Stack size 72 bytes, gd_rect.o(i._DrawRoundRect1))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _DrawRoundRect1 &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdVLine
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPixel
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdHLine
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRoundRect
</UL>

<P><STRONG><a name="[203]"></a>_DrawRoundRectEx</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, gd_rect.o(i._DrawRoundRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = _DrawRoundRectEx &rArr; VLine &rArr; Line &rArr; solid_line &rArr; _FillPolygon &rArr; GUI_AA_End &rArr; _FlushLine &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VLine
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLine
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawArc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRoundRect
</UL>

<P><STRONG><a name="[209]"></a>_DrawString</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, gd_text.o(i._DrawString))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _DrawString &rArr; _DrawChar
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetFontInfo
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextOut
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
</UL>

<P><STRONG><a name="[376]"></a>_FillPolygon</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, gd_polygon.o(i._FillPolygon))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _FillPolygon &rArr; GUI_AA_End &rArr; _FlushLine &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_End
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Begin
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsEnableAA
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdFillPolygon
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solid_line
</UL>

<P><STRONG><a name="[1ca]"></a>_GetCaptionRect</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, gui_window.o(i._GetCaptionRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _GetCaptionRect &rArr; InflateRectEx
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRectEmpty
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflateRectEx
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawWindowNC
</UL>

<P><STRONG><a name="[1cb]"></a>_GetCloseBoxRect</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gui_window.o(i._GetCloseBoxRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _GetCloseBoxRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRectEmpty
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawWindowNC
</UL>

<P><STRONG><a name="[20a]"></a>_GetFontInfo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_font.o(i._GetFontInfo))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawString
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
</UL>

<P><STRONG><a name="[1da]"></a>_GetWindow</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, gui_window.o(i._GetWindow))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForegroundWindow
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindow
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPaint
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateWindowEx
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowToTop
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseDC
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDCEx
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendMessage_WM_SIZE_AllChild
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendMessage_WM_MOVE_AllChild
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OffsetWindowRect
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertInvRect
</UL>

<P><STRONG><a name="[298]"></a>_GetWindowClipRgn</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, gui_window.o(i._GetWindowClipRgn))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _GetWindowClipRgn &rArr; _CalculateWindowClipRgn &rArr; RGN_SubtractRect &rArr; GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsWindowVisible
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteRgn
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalculateWindowClipRgn
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDCEx
</UL>

<P><STRONG><a name="[2a1]"></a>_GetWindowFromPoint</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, gui_window.o(i._GetWindowFromPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = _GetWindowFromPoint &rArr;  _GetWindowFromPoint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsWindowVisible
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PtInRect
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowFromPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowFromPoint
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowFromPoint
</UL>

<P><STRONG><a name="[1c3]"></a>_GetWindowRect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_window.o(i._GetWindowRect))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawWindowNC
</UL>

<P><STRONG><a name="[201]"></a>_InflateRect</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gui_region.o(i._InflateRect))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRect
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
</UL>

<P><STRONG><a name="[1a2]"></a>_IntersectRect</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, gui_region.o(i._IntersectRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsIntersectRect
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdVLine
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdHLine
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdFillRect
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetDrawRect
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDC
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitmap
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CursorShow
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CursorHide
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawWindowNC
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitBlt
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalculateWindowClipRgn
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDCEx
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertInvRect
</UL>

<P><STRONG><a name="[32d]"></a>_IsChild</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_window.o(i._IsChild))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostQuitMessage
</UL>

<P><STRONG><a name="[1f0]"></a>_IsEnableAA</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_aa_core.o(i._IsEnableAA))
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VLine
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLine
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawArc
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdFillRoundRect
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRoundRect
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRoundRect
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteDC
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillCircle
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillPolygon
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solid_line
</UL>

<P><STRONG><a name="[236]"></a>_IsIntersectRect</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gui_region.o(i._IsIntersectRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PtInRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForegroundWindow
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGN_SubtractRect
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntersectRect
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertRECT_LL
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_CursorCheck
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HideWindow
</UL>

<P><STRONG><a name="[1b8]"></a>_IsWindowVisible</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gui_window.o(i._IsWindowVisible))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWindowHit
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInput
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowFromPoint
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowClipRgn
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseDC
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PaintHandler
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FlushHandler
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HideWindow
</UL>

<P><STRONG><a name="[19a]"></a>_LPtoDP</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, gui_gdi.o(i._LPtoDP))
<BR><BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WindowToScreen
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClientToScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdVLine
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdHLine
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdFillRect
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitmap
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitBlt
</UL>

<P><STRONG><a name="[37d]"></a>_OffsetRect</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_region.o(i._OffsetRect))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OffsetWindowRect
</UL>

<P><STRONG><a name="[36c]"></a>_PosInRgn</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, gui_region.o(i._PosInRgn))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _PosInRgn
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorPixel
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdSetPixelARGB
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdSetPixel
</UL>

<P><STRONG><a name="[335]"></a>_PostFlushMessage</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gui_message.o(i._PostFlushMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _PostFlushMessage &rArr; GUI_SemPost &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseDC
</UL>

<P><STRONG><a name="[37e]"></a>_PostNCPaintMessage</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gui_message.o(i._PostNCPaintMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _PostNCPaintMessage &rArr; GUI_SemPost &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
</UL>

<P><STRONG><a name="[217]"></a>_PostPaintMessage</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gui_message.o(i._PostPaintMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _PostPaintMessage &rArr; GUI_SemPost &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForegroundWindow
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPaint
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRect
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertInvRect
</UL>

<P><STRONG><a name="[1b9]"></a>_PtInRect</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gui_region.o(i._PtInRect))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWindowHit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsIntersectRect
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PtInRect
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowFromPoint
</UL>

<P><STRONG><a name="[29a]"></a>_ScreenToClient</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gui_window.o(i._ScreenToClient))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenToClient
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseDC
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDCEx
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertInvRect
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HideWindow
</UL>

<P><STRONG><a name="[1c6]"></a>_ScreenToWindow</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gui_window.o(i._ScreenToWindow))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawWindowNC
</UL>

<P><STRONG><a name="[206]"></a>_SetDrawRect</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, gui_gdi.o(i._SetDrawRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _SetDrawRect &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
</UL>

<P><STRONG><a name="[1bb]"></a>_SetRectEmpty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_region.o(i._SetRectEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWindowHit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCloseBoxRect
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCaptionRect
</UL>

<P><STRONG><a name="[356]"></a>_SetWindowToTop</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, gui_window.o(i._SetWindowToTop))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _SetWindowToTop &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForegroundWindow
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
</UL>

<P><STRONG><a name="[1f5]"></a>_WindowCleanup</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, gui_window.o(i._WindowCleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _WindowCleanup &rArr; DeleteRgn &rArr; GUI_RectLL_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_KillWindowTimers
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RemoveWindowMessage
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DeleteMsgQ
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteRgn
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexDelete
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_wstr_free
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeekMessage
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyWindow
</UL>

<P><STRONG><a name="[37b]"></a>_WindowToScreen</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gui_window.o(i._WindowToScreen))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LPtoDP
</UL>

<P><STRONG><a name="[161]"></a>_Wu_DrawBoldLine</STRONG> (Thumb, 448 bytes, Stack size 80 bytes, gd_line.o(i._Wu_DrawBoldLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = _Wu_DrawBoldLine &rArr; gdSetPixelARGB &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_abs
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRGB
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdSetPixelARGB
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdSetPixel
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AA_DrawBoldLine
</UL>

<P><STRONG><a name="[383]"></a>_Wu_DrawLine</STRONG> (Thumb, 316 bytes, Stack size 64 bytes, gd_line.o(i._Wu_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _Wu_DrawLine &rArr; gdSetPixelARGB &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_abs
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRGB
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdSetPixelARGB
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solid_line
</UL>

<P><STRONG><a name="[384]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[497]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[176]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Catalog
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Ignore
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Resource
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_Content
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BurnFile
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Startup
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Thread_Entry
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Write
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Erase_Chip
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TIMEOUT_UserCallback
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Read_Version
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Execu
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goodix_TS_Work_Func
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Write
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Test
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Read
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Get_Info
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_firmware_info
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_stack_info
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fault_diagnosis
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_stack
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Load_Res
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Boot_Interface_Dialog
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSystem_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Alloc
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init_Extern_Font_2RAM
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Thread_Create
</UL>

<P><STRONG><a name="[386]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[498]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[30e]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Catalog
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Ignore
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
</UL>

<P><STRONG><a name="[390]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[146]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[499]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[396]"></a>__hardfp_ceil</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, ceil.o(i.__hardfp_ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_ceil
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[387]"></a>__hardfp_cos</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[3f9]"></a>__hardfp_floor</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, floor.o(i.__hardfp_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[38d]"></a>__hardfp_sin</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[38a]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 646 bytes, Stack size 144 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[38c]"></a>__kernel_cos</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_cos
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[38f]"></a>__kernel_poly</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[38b]"></a>__kernel_sin</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __kernel_sin &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[389]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[391]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[49a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[49b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[49c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[388]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[46c]"></a>bootlogo_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, boot_logo.o(i.bootlogo_size))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>

<P><STRONG><a name="[36f]"></a>ceil</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ceil.o(i.ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ceil &rArr; __hardfp_ceil
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
</UL>

<P><STRONG><a name="[3d1]"></a>clust2sect</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[399]"></a>cm_backtrace_call_stack</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, cm_backtrace.o(i.cm_backtrace_call_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cm_backtrace_call_stack &rArr; get_cur_thread_stack_info &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_cm_backtrace_c_13c737ea__cmb_get_sp
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_cm_backtrace_c_13c737ea__cmb_get_psp
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_stack_info
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
</UL>

<P><STRONG><a name="[13c]"></a>cm_backtrace_fault</STRONG> (Thumb, 434 bytes, Stack size 88 bytes, cm_backtrace.o(i.cm_backtrace_fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = cm_backtrace_fault &rArr; print_call_stack &rArr; cm_backtrace_call_stack &rArr; get_cur_thread_stack_info &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_firmware_info
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_cm_backtrace_c_13c737ea__cmb_get_psp
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statck_del_fpu_regs
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_stack_info
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_name
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fault_diagnosis
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_stack
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[39d]"></a>cm_backtrace_firmware_info</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cm_backtrace.o(i.cm_backtrace_firmware_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cm_backtrace_firmware_info &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[186]"></a>cm_backtrace_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cm_backtrace.o(i.cm_backtrace_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cm_backtrace_init &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[22b]"></a>cos</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = cos &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL32_rotate_bitmap
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_rotate_bitmap
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_rotate_bitmap
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
</UL>

<P><STRONG><a name="[3d9]"></a>disk_initialize</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = disk_initialize &rArr; BSP_SD_Init &rArr; HAL_SD_Init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[3da]"></a>disk_ioctl</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = disk_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[3dc]"></a>disk_read</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = disk_read &rArr; HAL_SD_ReadBlocks_DMA &rArr; SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_InvalidateDCache_by_Addr
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_CleanDCache_by_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[3df]"></a>disk_status</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, diskio.o(i.disk_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = disk_status &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[3e0]"></a>disk_write</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_InvalidateDCache_by_Addr
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_CleanDCache_by_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[3e1]"></a>double_val_init</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, x_stdlib.o(i.double_val_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = double_val_init &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_wvsprintf
</UL>

<P><STRONG><a name="[1b5]"></a>f_close</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = f_close &rArr; f_sync &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CatalogInfo
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Catalog
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Ignore
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Resource
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_Content
</UL>

<P><STRONG><a name="[1ab]"></a>f_closedir</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ff.o(i.f_closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = f_closedir &rArr; validate &rArr; disk_status &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Catalog
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BurnFile
</UL>

<P><STRONG><a name="[30c]"></a>f_gets</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, ff.o(i.f_gets))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = f_gets &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CatalogInfo
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Ignore
</UL>

<P><STRONG><a name="[1be]"></a>f_lseek</STRONG> (Thumb, 658 bytes, Stack size 40 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Catalog
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Resource
</UL>

<P><STRONG><a name="[21c]"></a>f_mkfs</STRONG> (Thumb, 1390 bytes, Stack size 80 bytes, ff.o(i.f_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = f_mkfs &rArr; disk_initialize &rArr; BSP_SD_Init &rArr; HAL_SD_Init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSystem_Init
</UL>

<P><STRONG><a name="[21b]"></a>f_mount</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = f_mount &rArr; find_volume &rArr; disk_initialize &rArr; BSP_SD_Init &rArr; HAL_SD_Init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSystem_Init
</UL>

<P><STRONG><a name="[1b4]"></a>f_open</STRONG> (Thumb, 456 bytes, Stack size 4720 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 5076<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CatalogInfo
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Catalog
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Ignore
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Resource
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_Content
</UL>

<P><STRONG><a name="[1a8]"></a>f_opendir</STRONG> (Thumb, 124 bytes, Stack size 552 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 892<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Catalog
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BurnFile
</UL>

<P><STRONG><a name="[31c]"></a>f_printf</STRONG> (Thumb, 550 bytes, Stack size 152 bytes, ff.o(i.f_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = f_printf &rArr; putc_bfd &rArr;  putc_bfd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Catalog
</UL>

<P><STRONG><a name="[1b6]"></a>f_read</STRONG> (Thumb, 406 bytes, Stack size 40 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Resource
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_Content
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
</UL>

<P><STRONG><a name="[31b]"></a>f_readdir</STRONG> (Thumb, 98 bytes, Stack size 544 bytes, ff.o(i.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 852<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Catalog
</UL>

<P><STRONG><a name="[3ea]"></a>f_sync</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = f_sync &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[31a]"></a>f_unlink</STRONG> (Thumb, 230 bytes, Stack size 8856 bytes, ff.o(i.f_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 9196<LI>Call Chain = f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Catalog
</UL>

<P><STRONG><a name="[3f5]"></a>f_write</STRONG> (Thumb, 464 bytes, Stack size 40 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[38e]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[21d]"></a>ff_convert</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, cc936.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSystem_Init
</UL>

<P><STRONG><a name="[3a5]"></a>ff_wtoupper</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cc936.o(i.ff_wtoupper))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[370]"></a>floor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = floor &rArr; __hardfp_floor
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
</UL>

<P><STRONG><a name="[f3]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bsp_usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[249]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
</UL>

<P><STRONG><a name="[1f9]"></a>gdDraw3DRect</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, gd_rect.o(i.gdDraw3DRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = gdDraw3DRect &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdVLine
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill3DRect
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw3DRect
</UL>

<P><STRONG><a name="[167]"></a>gdFillCircle</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, gd_circle.o(i.gdFillCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gdFillCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillCircle
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AA_FillCircle
</UL>

<P><STRONG><a name="[377]"></a>gdFillPolygon</STRONG> (Thumb, 586 bytes, Stack size 72 bytes, gd_polygon.o(i.gdFillPolygon))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = gdFillPolygon &rArr; GUI_MEM_Alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillPolygon
</UL>

<P><STRONG><a name="[221]"></a>gdFillRect</STRONG> (Thumb, 288 bytes, Stack size 112 bytes, gd_rect.o(i.gdFillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = gdFillRect &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LPtoDP
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEnableAlpha
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRGB
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdFillRoundRect
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill3DRect
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_page
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
</UL>

<P><STRONG><a name="[223]"></a>gdFillRoundRect</STRONG> (Thumb, 434 bytes, Stack size 104 bytes, gd_rect.o(i.gdFillRoundRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = gdFillRoundRect &rArr; gdFillRect &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdFillRect
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsEnableAA
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRoundRect
</UL>

<P><STRONG><a name="[ee]"></a>gdHLine</STRONG> (Thumb, 310 bytes, Stack size 120 bytes, gd_line.o(i.gdHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LPtoDP
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEnableAlpha
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRGB
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdDraw3DRect
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawRoundRect1
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GradientFillRect
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRect
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FlushLine
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdLine
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gui_aa_core.o(i.GUI_AA_End)
<LI> gui_gdi.o(i.InitDC)
</UL>
<P><STRONG><a name="[32c]"></a>gdLine</STRONG> (Thumb, 272 bytes, Stack size 80 bytes, gd_line.o(i.gdLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = gdLine &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_abs
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdVLine
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdHLine
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdSetPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solid_line
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PolyLine
</UL>

<P><STRONG><a name="[358]"></a>gdSetPixel</STRONG> (Thumb, 162 bytes, Stack size 72 bytes, gd_pixel.o(i.gdSetPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = gdSetPixel &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PosInRgn
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEnableAlpha
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPixel
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdLine
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawBoldLine
</UL>

<P><STRONG><a name="[379]"></a>gdSetPixelARGB</STRONG> (Thumb, 118 bytes, Stack size 88 bytes, gd_pixel.o(i.gdSetPixelARGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = gdSetPixelARGB &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PosInRgn
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FlushLine
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawLine
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawBoldLine
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_circle_pixel
</UL>

<P><STRONG><a name="[200]"></a>gdVLine</STRONG> (Thumb, 308 bytes, Stack size 112 bytes, gd_line.o(i.gdVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = gdVLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LPtoDP
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEnableAlpha
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRGB
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VLine
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdDraw3DRect
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawRoundRect1
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GradientFillRect
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRect
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdLine
</UL>

<P><STRONG><a name="[3aa]"></a>get_fat</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[3ee]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[438]"></a>hBmpArrowDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_resource.o(i.hBmpArrowDown))
<BR><BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
</UL>

<P><STRONG><a name="[439]"></a>hBmpArrowLeft</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_resource.o(i.hBmpArrowLeft))
<BR><BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
</UL>

<P><STRONG><a name="[43a]"></a>hBmpArrowRight</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_resource.o(i.hBmpArrowRight))
<BR><BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
</UL>

<P><STRONG><a name="[437]"></a>hBmpArrowUp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_resource.o(i.hBmpArrowUp))
<BR><BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
</UL>

<P><STRONG><a name="[2ff]"></a>i2c_Ack</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bsp_i2c_touch.o(i.i2c_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBytes
</UL>

<P><STRONG><a name="[300]"></a>i2c_NAck</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bsp_i2c_touch.o(i.i2c_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBytes
</UL>

<P><STRONG><a name="[2fe]"></a>i2c_ReadByte</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bsp_i2c_touch.o(i.i2c_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBytes
</UL>

<P><STRONG><a name="[2fb]"></a>i2c_SendByte</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, bsp_i2c_touch.o(i.i2c_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBytes
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBytes
</UL>

<P><STRONG><a name="[2fa]"></a>i2c_Start</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bsp_i2c_touch.o(i.i2c_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBytes
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBytes
</UL>

<P><STRONG><a name="[2fd]"></a>i2c_Stop</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_i2c_touch.o(i.i2c_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBytes
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBytes
</UL>

<P><STRONG><a name="[2fc]"></a>i2c_WaitAck</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bsp_i2c_touch.o(i.i2c_WaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBytes
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBytes
</UL>

<P><STRONG><a name="[411]"></a>lodepng_add_itext</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, lodepng.o(i.lodepng_add_itext))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lodepng_add_itext &rArr; string_set &rArr; string_resize &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_set
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_init
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_realloc
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt
</UL>

<P><STRONG><a name="[415]"></a>lodepng_add_text</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, lodepng.o(i.lodepng_add_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lodepng_add_text &rArr; string_set &rArr; string_resize &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_set
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_init
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_realloc
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tEXt
</UL>

<P><STRONG><a name="[3be]"></a>lodepng_chunk_ancillary</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_chunk_ancillary))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[3bf]"></a>lodepng_chunk_append</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lodepng.o(i.lodepng_chunk_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lodepng_chunk_append &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_length
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[3c0]"></a>lodepng_chunk_check_crc</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, lodepng.o(i.lodepng_chunk_check_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lodepng_chunk_check_crc &rArr; lodepng_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_read32bitInt
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_crc32
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_length
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[3b3]"></a>lodepng_chunk_data_const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_chunk_data_const))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[3b2]"></a>lodepng_chunk_length</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_chunk_length))
<BR><BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_read32bitInt
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_next_const
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_check_crc
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_append
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[3c1]"></a>lodepng_chunk_next_const</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, lodepng.o(i.lodepng_chunk_next_const))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lodepng_chunk_next_const
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_length
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[3b4]"></a>lodepng_chunk_type_equals</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lodepng.o(i.lodepng_chunk_type_equals))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lodepng_chunk_type_equals
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[418]"></a>lodepng_color_mode_cleanup</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_color_mode_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lodepng_color_mode_cleanup &rArr; lodepng_palette_clear &rArr; lodepng_free &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_palette_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_state_cleanup
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_copy
</UL>

<P><STRONG><a name="[41a]"></a>lodepng_color_mode_copy</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lodepng.o(i.lodepng_color_mode_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lodepng_color_mode_copy &rArr; lodepng_color_mode_cleanup &rArr; lodepng_palette_clear &rArr; lodepng_free &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_cleanup
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
</UL>

<P><STRONG><a name="[42b]"></a>lodepng_color_mode_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_color_mode_init))
<BR><BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_state_init
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_init
</UL>

<P><STRONG><a name="[41b]"></a>lodepng_convert</STRONG> (Thumb, 398 bytes, Stack size 136 bytes, lodepng.o(i.lodepng_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lodepng_convert &rArr; color_tree_add &rArr; lodepng_malloc &rArr; GUI_VMEM_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_raw_size
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgba8ToPixel
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgba16ToPixel
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_equal
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixelColorsRGBA8
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixelColorRGBA8
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixelColorRGBA16
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_init
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_cleanup
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_add
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
</UL>

<P><STRONG><a name="[417]"></a>lodepng_crc32</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, lodepng.o(i.lodepng_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lodepng_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_check_crc
</UL>

<P><STRONG><a name="[420]"></a>lodepng_decode</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, lodepng.o(i.lodepng_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = lodepng_decode &rArr; decodeGeneric &rArr; readChunk_iTXt &rArr; zlib_decompress &rArr; lodepng_zlib_decompress &rArr; inflate &rArr; lodepng_inflate &rArr; lodepng_inflatev &rArr; inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; uivector_resizev &rArr; uivector_resize &rArr; uivector_reserve &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_raw_size
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_copy
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_equal
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode_memory
</UL>

<P><STRONG><a name="[327]"></a>lodepng_decode_memory</STRONG> (Thumb, 64 bytes, Stack size 272 bytes, lodepng.o(i.lodepng_decode_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = lodepng_decode_memory &rArr; lodepng_decode &rArr; decodeGeneric &rArr; readChunk_iTXt &rArr; zlib_decompress &rArr; lodepng_zlib_decompress &rArr; inflate &rArr; lodepng_inflate &rArr; lodepng_inflatev &rArr; inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; uivector_resizev &rArr; uivector_resize &rArr; uivector_reserve &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_state_init
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_state_cleanup
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PNG_Open
</UL>

<P><STRONG><a name="[430]"></a>lodepng_decoder_settings_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_decoder_settings_init))
<BR><BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_state_init
</UL>

<P><STRONG><a name="[49d]"></a>lodepng_decompress_settings_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_decompress_settings_init), UNUSED)

<P><STRONG><a name="[2ee]"></a>lodepng_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lodepng_app.o(i.lodepng_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lodepng_free &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_palette_clear
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_itext
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uivector_cleanup
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_cleanup
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_cleanup
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tEXt
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_PLTE
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateFixedLitLenTree
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateFixedDistanceTree
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_cleanup
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGUnknownChunks_cleanup
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGText_cleanup
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGIText_cleanup
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_cleanup
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PNG_Close
</UL>

<P><STRONG><a name="[425]"></a>lodepng_get_bpp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_get_bpp))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_raw_size
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postProcessScanlines
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_raw_size_idat
</UL>

<P><STRONG><a name="[3c6]"></a>lodepng_get_raw_size</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lodepng.o(i.lodepng_get_raw_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lodepng_get_raw_size
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[40e]"></a>lodepng_inflate</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, lodepng.o(i.lodepng_inflate))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = lodepng_inflate &rArr; lodepng_inflatev &rArr; inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; uivector_resizev &rArr; uivector_resize &rArr; uivector_reserve &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_init_buffer
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflatev
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate
</UL>

<P><STRONG><a name="[429]"></a>lodepng_info_cleanup</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lodepng.o(i.lodepng_info_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lodepng_info_cleanup &rArr; LodePNGText_cleanup &rArr; string_cleanup &rArr; lodepng_free &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_cleanup
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGUnknownChunks_cleanup
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGText_cleanup
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGIText_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_state_cleanup
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect
</UL>

<P><STRONG><a name="[42a]"></a>lodepng_info_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lodepng.o(i.lodepng_info_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lodepng_info_init
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_init
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGUnknownChunks_init
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGText_init
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGIText_init
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_state_init
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect
</UL>

<P><STRONG><a name="[3b0]"></a>lodepng_inspect</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, lodepng.o(i.lodepng_inspect))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lodepng_inspect &rArr; lodepng_info_cleanup &rArr; LodePNGText_cleanup &rArr; string_cleanup &rArr; lodepng_free &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_read32bitInt
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_init
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_crc32
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkColorValidity
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[2f0]"></a>lodepng_malloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lodepng_app.o(i.lodepng_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lodepng_malloc &rArr; GUI_VMEM_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_copy
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tEXt
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_PLTE
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateFixedLitLenTree
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateFixedDistanceTree
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_add
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths2
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_make2DTree
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PNG_Open
</UL>

<P><STRONG><a name="[419]"></a>lodepng_palette_clear</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lodepng.o(i.lodepng_palette_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lodepng_palette_clear &rArr; lodepng_free &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_cleanup
</UL>

<P><STRONG><a name="[416]"></a>lodepng_read32bitInt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_read32bitInt))
<BR><BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_zlib_decompress
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_length
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_check_crc
</UL>

<P><STRONG><a name="[412]"></a>lodepng_realloc</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lodepng_app.o(i.lodepng_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Free
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Alloc
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_append
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_itext
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uivector_reserve
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_reserve
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_resize
</UL>

<P><STRONG><a name="[422]"></a>lodepng_state_cleanup</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lodepng.o(i.lodepng_state_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lodepng_state_cleanup &rArr; lodepng_info_cleanup &rArr; LodePNGText_cleanup &rArr; string_cleanup &rArr; lodepng_free &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode_memory
</UL>

<P><STRONG><a name="[421]"></a>lodepng_state_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lodepng.o(i.lodepng_state_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lodepng_state_init &rArr; lodepng_info_init
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_init
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decoder_settings_init
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_init
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode_memory
</UL>

<P><STRONG><a name="[431]"></a>lodepng_zlib_decompress</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, lodepng.o(i.lodepng_zlib_decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = lodepng_zlib_decompress &rArr; inflate &rArr; lodepng_inflate &rArr; lodepng_inflatev &rArr; inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; uivector_resizev &rArr; uivector_resize &rArr; uivector_reserve &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_read32bitInt
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adler32
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zlib_decompress
</UL>

<P><STRONG><a name="[95]"></a>main</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = main &rArr; BSP_Init &rArr; UARTx_Config &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[247]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
</UL>

<P><STRONG><a name="[3ab]"></a>put_fat</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[276]"></a>pvPortMalloc</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
</UL>

<P><STRONG><a name="[477]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[451]"></a>pxPortInitialiseStack</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[22d]"></a>sin</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sin &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL32_rotate_bitmap
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_rotate_bitmap
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_rotate_bitmap
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
</UL>

<P><STRONG><a name="[314]"></a>solid_line</STRONG> (Thumb, 584 bytes, Stack size 80 bytes, gd_line.o(i.solid_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = solid_line &rArr; _FillPolygon &rArr; GUI_AA_End &rArr; _FlushLine &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsEnableAA
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillPolygon
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdLine
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line
</UL>

<P><STRONG><a name="[43e]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
</UL>

<P><STRONG><a name="[452]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[450]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[440]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[43f]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
</UL>

<P><STRONG><a name="[442]"></a>vPortEnterCritical</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vPortEnterCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[444]"></a>vPortExitCritical</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[277]"></a>vPortFree</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
</UL>

<P><STRONG><a name="[472]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[27b]"></a>vQueueDelete</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(i.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemDelete
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexDelete
</UL>

<P><STRONG><a name="[464]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, queue.o(i.vQueueUnregisterQueue))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[28d]"></a>vTaskDelay</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Thread_Entry
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_msleep
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Yield
</UL>

<P><STRONG><a name="[28c]"></a>vTaskDelete</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Thread_Delete
</UL>

<P><STRONG><a name="[457]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[404]"></a>vTaskName</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskName))
<BR><BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_name
</UL>

<P><STRONG><a name="[466]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[467]"></a>vTaskPriorityInherit</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[468]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskSetTimeOutState &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[405]"></a>vTaskStackAddr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskStackAddr))
<BR><BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_stack_info
</UL>

<P><STRONG><a name="[406]"></a>vTaskStackSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskStackSize))
<BR><BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_stack_info
</UL>

<P><STRONG><a name="[432]"></a>vTaskStartScheduler</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[446]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[13b]"></a>vTaskSwitchContext</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskSwitchContext &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[469]"></a>xPortStartScheduler</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xPortStartScheduler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[35f]"></a>xPortSysTickHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[281]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, queue.o(i.xQueueCreateCountingSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemCreate
</UL>

<P><STRONG><a name="[279]"></a>xQueueCreateMutex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexCreate
</UL>

<P><STRONG><a name="[476]"></a>xQueueGenericCreate</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>

<P><STRONG><a name="[285]"></a>xQueueGenericReceive</STRONG> (Thumb, 374 bytes, Stack size 64 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemWait
</UL>

<P><STRONG><a name="[44e]"></a>xQueueGenericReset</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[283]"></a>xQueueGenericSend</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemPost
</UL>

<P><STRONG><a name="[27e]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, queue.o(i.xQueueGiveMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexUnlock
</UL>

<P><STRONG><a name="[27c]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, queue.o(i.xQueueTakeMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexLock
</UL>

<P><STRONG><a name="[478]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[28b]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Thread_Create
</UL>

<P><STRONG><a name="[266]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCurThreadHandle
</UL>

<P><STRONG><a name="[35e]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[268]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTickCount
</UL>

<P><STRONG><a name="[475]"></a>xTaskIncrementTick</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[44b]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[456]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[447]"></a>xTaskResumeAll</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[291]"></a>x_heap_alloc</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, x_heap.o(i.x_heap_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = x_heap_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sizeof_struct_mem
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_size_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Alloc
</UL>

<P><STRONG><a name="[292]"></a>x_heap_free</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, x_heap.o(i.x_heap_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = x_heap_free
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sizeof_struct_mem
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Free
</UL>

<P><STRONG><a name="[293]"></a>x_heap_init</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, x_heap.o(i.x_heap_init))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Init
</UL>

<P><STRONG><a name="[331]"></a>x_strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, x_string.o(i.x_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_GetOffset
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_GetInfo_AbsAddr
</UL>

<P><STRONG><a name="[332]"></a>x_strncasecmp</STRONG> (Thumb, 190 bytes, Stack size 20 bytes, x_string.o(i.x_strncasecmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = x_strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_GetOffset
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_GetInfo_AbsAddr
</UL>

<P><STRONG><a name="[47c]"></a>x_tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, x_string.o(i.x_tolower))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_strncasecmp
</UL>

<P><STRONG><a name="[47f]"></a>x_toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, x_string.o(i.x_toupper))
<BR><BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_wvsprintf
</UL>

<P><STRONG><a name="[1b3]"></a>x_wsprintf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, x_wstring.o(i.x_wsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = x_wsprintf &rArr; x_wvsprintf &rArr; vprtf_float_date_analy &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_wvsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Resource
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Burn_Content
</UL>

<P><STRONG><a name="[47d]"></a>x_wvsprintf</STRONG> (Thumb, 508 bytes, Stack size 72 bytes, x_wstring.o(i.x_wvsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = x_wvsprintf &rArr; vprtf_float_date_analy &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprtf_wide_get
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprtf_str_store
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprtf_ltoa_store
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprtf_float_date_analy
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_val_init
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_wsprintf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2ac]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[2a9]"></a>LTDC_SetConfig</STRONG> (Thumb, 350 bytes, Stack size 20 bytes, stm32h7xx_hal_ltdc.o(i.LTDC_SetConfig), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>

<P><STRONG><a name="[2af]"></a>QSPI_Config</STRONG> (Thumb, 534 bytes, Stack size 24 bytes, stm32h7xx_hal_qspi.o(i.QSPI_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
</UL>

<P><STRONG><a name="[2ae]"></a>QSPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, stm32h7xx_hal_qspi.o(i.QSPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
</UL>

<P><STRONG><a name="[2b8]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(i.RCCEx_PLL2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[2b9]"></a>RCCEx_PLL3_Config</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(i.RCCEx_PLL3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[34d]"></a>SD_FindSCR</STRONG> (Thumb, 274 bytes, Stack size 64 bytes, stm32h7xx_hal_sd.o(i.SD_FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>

<P><STRONG><a name="[2db]"></a>SD_InitCard</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, stm32h7xx_hal_sd.o(i.SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetPowerState
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[2da]"></a>SD_PowerON</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, stm32h7xx_hal_sd.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SD_PowerON &rArr; SDMMC_CmdAppCommand &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[2d2]"></a>SD_Read_IT</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32h7xx_hal_sd.o(i.SD_Read_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_Read_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[2cb]"></a>SD_SendStatus</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32h7xx_hal_sd.o(i.SD_SendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>

<P><STRONG><a name="[2c8]"></a>SD_WideBus_Disable</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32h7xx_hal_sd.o(i.SD_WideBus_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SD_WideBus_Disable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[2c7]"></a>SD_WideBus_Enable</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32h7xx_hal_sd.o(i.SD_WideBus_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[2d1]"></a>SD_Write_IT</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32h7xx_hal_sd.o(i.SD_Write_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_Write_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_WriteFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[33d]"></a>SDMMC_GetCmdError</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_GetCmdError))
<BR><BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
</UL>

<P><STRONG><a name="[338]"></a>SDMMC_GetCmdResp1</STRONG> (Thumb, 266 bytes, Stack size 4 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp1))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[342]"></a>SDMMC_GetCmdResp2</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp2))
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
</UL>

<P><STRONG><a name="[33a]"></a>SDMMC_GetCmdResp3</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp3))
<BR><BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
</UL>

<P><STRONG><a name="[347]"></a>SDMMC_GetCmdResp6</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp6))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
</UL>

<P><STRONG><a name="[33f]"></a>SDMMC_GetCmdResp7</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp7))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
</UL>

<P><STRONG><a name="[180]"></a>BSP_Init</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, main.o(i.BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = BSP_Init &rArr; UARTx_Config &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Config
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>GUI_Thread_Entry</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, main.o(i.GUI_Thread_Entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = GUI_Thread_Entry &rArr; GUI_Startup &rArr; GUI_DesktopStartup &rArr; ShowWindow &rArr; SetWindowPos &rArr; _SetWindowPos &rArr; _HideWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Startup
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[181]"></a>SystemClock_Config</STRONG> (Thumb, 132 bytes, Stack size 128 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[34a]"></a>SDRAM_GPIO_Config</STRONG> (Thumb, 1638 bytes, Stack size 64 bytes, bsp_sdram.o(i.SDRAM_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDRAM_GPIO_Config &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Init
</UL>

<P><STRONG><a name="[34b]"></a>SDRAM_InitSequence</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, bsp_sdram.o(i.SDRAM_InitSequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDRAM_InitSequence &rArr; HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Init
</UL>

<P><STRONG><a name="[34c]"></a>SDRAM_delay</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, bsp_sdram.o(i.SDRAM_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDRAM_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_InitSequence
</UL>

<P><STRONG><a name="[311]"></a>LCD_GPIO_Config</STRONG> (Thumb, 954 bytes, Stack size 64 bytes, bsp_lcd.o(i.LCD_GPIO_Config), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[303]"></a>Delay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_i2c_touch.o(i.Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ResetChip
</UL>

<P><STRONG><a name="[2f6]"></a>I2C_GPIO_Config</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, bsp_i2c_touch.o(i.I2C_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_GPIO_Config &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Touch_Init
</UL>

<P><STRONG><a name="[40b]"></a>i2c_Delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_i2c_touch.o(i.i2c_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
</UL>

<P><STRONG><a name="[241]"></a>GTP_Get_Info</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, bsp_touch_gtxx.o(i.GTP_Get_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GTP_Get_Info &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; i2c_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Read
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
</UL>

<P><STRONG><a name="[23f]"></a>GTP_I2C_Read</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, bsp_touch_gtxx.o(i.GTP_I2C_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; i2c_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Transfer
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Read_Version
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Execu
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goodix_TS_Work_Func
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Test
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Get_Info
</UL>

<P><STRONG><a name="[243]"></a>GTP_I2C_Test</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, bsp_touch_gtxx.o(i.GTP_I2C_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GTP_I2C_Test &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; i2c_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Read
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
</UL>

<P><STRONG><a name="[240]"></a>GTP_I2C_Write</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, bsp_touch_gtxx.o(i.GTP_I2C_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GTP_I2C_Write &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; i2c_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Transfer
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Execu
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goodix_TS_Work_Func
</UL>

<P><STRONG><a name="[2a3]"></a>GTP_Touch_Down</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_touch_gtxx.o(i.GTP_Touch_Down))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goodix_TS_Work_Func
</UL>

<P><STRONG><a name="[2a2]"></a>GTP_Touch_Up</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_touch_gtxx.o(i.GTP_Touch_Up))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goodix_TS_Work_Func
</UL>

<P><STRONG><a name="[24b]"></a>Goodix_TS_Work_Func</STRONG> (Thumb, 310 bytes, Stack size 128 bytes, bsp_touch_gtxx.o(i.Goodix_TS_Work_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Goodix_TS_Work_Func &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; i2c_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Touch_Up
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Touch_Down
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Write
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Read
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_TouchProcess
</UL>

<P><STRONG><a name="[242]"></a>I2C_Transfer</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bsp_touch_gtxx.o(i.I2C_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_Transfer &rArr; I2C_WriteBytes &rArr; i2c_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBytes
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Write
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Read
</UL>

<P><STRONG><a name="[18a]"></a>QSPI_AutoPollingMemReady</STRONG> (Thumb, 76 bytes, Stack size 88 bytes, bsp_qspi_flash.o(i.QSPI_AutoPollingMemReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = QSPI_AutoPollingMemReady &rArr; HAL_QSPI_AutoPolling &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Write
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Erase_Chip
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ResetMemory
</UL>

<P><STRONG><a name="[18e]"></a>QSPI_ResetMemory</STRONG> (Thumb, 88 bytes, Stack size 64 bytes, bsp_qspi_flash.o(i.QSPI_ResetMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = QSPI_ResetMemory &rArr; QSPI_AutoPollingMemReady &rArr; HAL_QSPI_AutoPolling &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_AutoPollingMemReady
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
</UL>

<P><STRONG><a name="[188]"></a>QSPI_WriteEnable</STRONG> (Thumb, 104 bytes, Stack size 96 bytes, bsp_qspi_flash.o(i.QSPI_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = QSPI_WriteEnable &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Write
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Erase_Chip
</UL>

<P><STRONG><a name="[353]"></a>SPI_TIMEOUT_UserCallback</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_qspi_flash.o(i.SPI_TIMEOUT_UserCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BulkErase_GUI
</UL>

<P><STRONG><a name="[3dd]"></a>SCB_CleanDCache_by_Addr</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, diskio.o(i.SCB_CleanDCache_by_Addr))
<BR><BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[3de]"></a>SCB_InvalidateDCache_by_Addr</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, diskio.o(i.SCB_InvalidateDCache_by_Addr))
<BR><BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[397]"></a>check_fs</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[3ad]"></a>chk_chr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[3ec]"></a>clmt_clust</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ff.o(i.clmt_clust))
<BR><BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[3a4]"></a>cmp_lfn</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cmp_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[3a9]"></a>create_chain</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[3ac]"></a>create_name</STRONG> (Thumb, 542 bytes, Stack size 40 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = create_name &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[3ca]"></a>dir_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[3cd]"></a>dir_find</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[3cc]"></a>dir_next</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[3d2]"></a>dir_read</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[3d4]"></a>dir_register</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fit_lfn
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[3d8]"></a>dir_remove</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ff.o(i.dir_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = dir_remove &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[3cb]"></a>dir_sdi</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[3ef]"></a>find_volume</STRONG> (Thumb, 812 bytes, Stack size 56 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = find_volume &rArr; disk_initialize &rArr; BSP_SD_Init &rArr; HAL_SD_Init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[3d7]"></a>fit_lfn</STRONG> (Thumb, 104 bytes, Stack size 28 bytes, ff.o(i.fit_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = fit_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[3f0]"></a>follow_path</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[3d6]"></a>gen_numname</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gen_numname
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[3f6]"></a>get_fileinfo</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_fileinfo &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[3ed]"></a>get_ldnumber</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[3f1]"></a>ld_clust</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ff.o(i.ld_clust))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[3cf]"></a>mem_cmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[3d5]"></a>mem_cpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[3ae]"></a>mem_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[398]"></a>move_window</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[3d3]"></a>pick_lfn</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ff.o(i.pick_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pick_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[3f4]"></a>putc_bfd</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ff.o(i.putc_bfd))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + In Cycle
<LI>Call Chain = putc_bfd &rArr;  putc_bfd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[3f3]"></a>remove_chain</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[3f2]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[3ce]"></a>sum_sfn</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.sum_sfn))
<BR><BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[3f7]"></a>sync_fs</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[3d0]"></a>sync_window</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = sync_window &rArr; disk_write &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[3eb]"></a>validate</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = validate &rArr; disk_status &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[449]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[44a]"></a>prvCopyDataToQueue</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[44c]"></a>prvInitialiseMutex</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, queue.o(i.prvInitialiseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[44d]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[453]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvIsQueueEmpty &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[454]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvIsQueueFull &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[455]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[43d]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[441]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvAddNewTaskToReadyList &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[445]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[448]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[f8]"></a>prvIdleTask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[44f]"></a>prvInitialiseNewTask</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvInitialiseNewTask &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[443]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[465]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[459]"></a>prvHeapInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[45a]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[f7]"></a>prvTaskExitError</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvTaskExitError &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[3a0]"></a>dump_stack</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, cm_backtrace.o(i.dump_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dump_stack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[3a1]"></a>fault_diagnosis</STRONG> (Thumb, 562 bytes, Stack size 16 bytes, cm_backtrace.o(i.fault_diagnosis))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fault_diagnosis &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[39e]"></a>get_cur_thread_name</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cm_backtrace.o(i.get_cur_thread_name))
<BR><BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskName
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[39a]"></a>get_cur_thread_stack_info</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, cm_backtrace.o(i.get_cur_thread_stack_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_cur_thread_stack_info &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStackSize
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStackAddr
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_call_stack
</UL>

<P><STRONG><a name="[3a2]"></a>print_call_stack</STRONG> (Thumb, 118 bytes, Stack size 96 bytes, cm_backtrace.o(i.print_call_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = print_call_stack &rArr; cm_backtrace_call_stack &rArr; get_cur_thread_stack_info &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_call_stack
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[39f]"></a>statck_del_fpu_regs</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cm_backtrace.o(i.statck_del_fpu_regs))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[272]"></a>GUI_LowLevelInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gui_startup.o(i.GUI_LowLevelInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GUI_LowLevelInit &rArr; GUI_VMEM_Init &rArr; GUI_MutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Init
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Init
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Log_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Startup
</UL>

<P><STRONG><a name="[374]"></a>_EraseBackgnd</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, gui_desktop.o(i._EraseBackgnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = _EraseBackgnd &rArr; DrawTextEx &rArr; DrawRect &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextOut
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextColor
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFont
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBrushColor
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapRGB
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClientRect
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRect
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desktop_proc
</UL>

<P><STRONG><a name="[f1]"></a>desktop_proc</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, gui_desktop.o(i.desktop_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = desktop_proc &rArr; GUI_InputHandler &rArr; GUI_TouchHandler &rArr; MouseInput &rArr; MouseInputHandler &rArr; MouseEventHandler &rArr; SetForegroundWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBrushColor
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapRGB
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefDesktopProc
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EraseBackgnd
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_InputHandler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Thread_Create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_desktop.o(i.GUI_DesktopStartup)
</UL>
<P><STRONG><a name="[99]"></a>App_Load_Res</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, gui_bootinterface.o(i.App_Load_Res))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = App_Load_Res &rArr; GUI_Init_Extern_Font &rArr; GUI_Init_Extern_Font_2RAM &rArr; SendMessage &rArr; PostMessage &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDefFont
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init_Extern_Font
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Thread_Delete
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Thread_Create
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCurThreadHandle
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_bootinterface.o(i.App_Load_Res)
</UL>
<P><STRONG><a name="[ef]"></a>win_proc</STRONG> (Thumb, 562 bytes, Stack size 112 bytes, gui_bootinterface.o(i.win_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = win_proc &rArr; DefWindowProc &rArr; DestroyWindow &rArr;  DestroyWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootlogo_size
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PNG_Open
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PNG_GetBitmap
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PNG_Close
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffsetRect
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDlgItem
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitmap
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyWindow
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateWindowEx
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Load_Res
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBrushColor
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapRGB
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClientRect
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_bootinterface.o(i.GUI_Boot_Interface_Dialog)
</UL>
<P><STRONG><a name="[98]"></a>App_FLASH_Writer</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, gui_res_writer_dialog.o(i.App_FLASH_Writer))
<BR><BR>[Stack]<UL><LI>Max Depth = 17668<LI>Call Chain = App_FLASH_Writer &rArr; BurnFile &rArr; Make_Catalog &rArr;  Make_Catalog (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BurnFile
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Thread_Delete
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Thread_Create
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCurThreadHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_res_writer_dialog.o(i.App_FLASH_Writer)
</UL>
<P><STRONG><a name="[f2]"></a>win_proc</STRONG> (Thumb, 946 bytes, Stack size 1024 bytes, gui_res_writer_dialog.o(i.win_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 18692<LI>Call Chain = win_proc &rArr; App_FLASH_Writer &rArr; BurnFile &rArr; Make_Catalog &rArr;  Make_Catalog (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostCloseMessage
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPaint
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableWindow
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginPaint
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_FLASH_Writer
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWindowText
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDlgItem
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateWindowEx
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWindow
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBrushColor
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapRGB
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClientRect
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRect
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_res_writer_dialog.o(i.GUI_RES_Writer_Dialog)
</UL>
<P><STRONG><a name="[f9]"></a>__create_font</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gui_font_xft.o(i.__create_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __create_font &rArr; GUI_MEM_Alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_font_xft.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>__delete_font</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gui_font_xft.o(i.__delete_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __delete_font &rArr; GUI_MEM_Free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_font_xft.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>__draw_char</STRONG> (Thumb, 288 bytes, Stack size 80 bytes, gui_font_xft.o(i.__draw_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = __draw_char &rArr; Draw3DRect &rArr; gdDraw3DRect &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw3DRect
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflateRect
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_font_xft.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>__get_char_info</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, gui_font_xft.o(i.__get_char_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __get_char_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_font_xft.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>__get_font_info</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_font_xft.o(i.__get_font_info))
<BR>[Address Reference Count : 1]<UL><LI> gui_font_xft.o(.constdata)
</UL>
<P><STRONG><a name="[31d]"></a>MouseEventHandler</STRONG> (Thumb, 630 bytes, Stack size 64 bytes, gui_input.o(i.MouseEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = MouseEventHandler &rArr; SetForegroundWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForegroundWindow
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenToClient
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsWindowEnabled
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEnableDragWindow
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowRect
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowLong
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindow
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParent
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostCloseMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInputHandler
</UL>

<P><STRONG><a name="[321]"></a>MouseInputHandler</STRONG> (Thumb, 412 bytes, Stack size 64 bytes, gui_input.o(i.MouseInputHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = MouseInputHandler &rArr; MouseEventHandler &rArr; SetForegroundWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenToWindow
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_abs
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseEventHandler
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInput
</UL>

<P><STRONG><a name="[35d]"></a>_HideWindow</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, gui_window.o(i._HideWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = _HideWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsWindowVisible
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsIntersectRect
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScreenToClient
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRect
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowClipFlag
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWindow
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
</UL>

<P><STRONG><a name="[1d9]"></a>_InitWindow</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, gui_window.o(i._InitWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _InitWindow &rArr; GUI_CreateMsgQ &rArr; GUI_SemCreate &rArr; xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateMsgQ
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexCreate
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCurThreadHandle
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_wstr_alloc
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowSize
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateWindowEx
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDesktop
</UL>

<P><STRONG><a name="[216]"></a>_InsertInvRect</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, gui_window.o(i._InsertInvRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _InsertInvRect &rArr; RGN_SubtractRect &rArr; GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PostPaintMessage
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGN_SubtractRect
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RECT_LLAddRect
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRectRgnIndirect
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScreenToClient
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClientToScreen
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForegroundWindow
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPaint
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseDC
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRect
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
</UL>

<P><STRONG><a name="[37c]"></a>_OffsetWindowRect</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gui_window.o(i._OffsetWindowRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = _OffsetWindowRect &rArr;  _OffsetWindowRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OffsetRect
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindow
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OffsetWindowRect
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OffsetWindowRect
</UL>

<P><STRONG><a name="[357]"></a>_RedrawWindow</STRONG> (Thumb, 310 bytes, Stack size 48 bytes, gui_window.o(i._RedrawWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + In Cycle
<LI>Call Chain = _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PostNCPaintMessage
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsIntersectRect
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScreenToClient
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClientToScreen
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindow
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRect
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PaintHandler
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FlushHandler
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowClipFlag
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForegroundWindow
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowWindow
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HideWindow
</UL>

<P><STRONG><a name="[37f]"></a>_SendMessage_WM_MOVE_AllChild</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gui_window.o(i._SendMessage_WM_MOVE_AllChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + In Cycle
<LI>Call Chain = _SendMessage_WM_MOVE_AllChild &rArr;  _SendMessage_WM_MOVE_AllChild (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindow
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendMessage_WM_MOVE_AllChild
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendMessage_WM_MOVE_AllChild
</UL>

<P><STRONG><a name="[380]"></a>_SendMessage_WM_SIZE_AllChild</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gui_window.o(i._SendMessage_WM_SIZE_AllChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + In Cycle
<LI>Call Chain = _SendMessage_WM_SIZE_AllChild &rArr;  _SendMessage_WM_SIZE_AllChild (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindow
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendMessage_WM_SIZE_AllChild
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendMessage_WM_SIZE_AllChild
</UL>

<P><STRONG><a name="[1db]"></a>_SetWindowClipFlag</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, gui_window.o(i._SetWindowClipFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + In Cycle
<LI>Call Chain = _SetWindowClipFlag &rArr;  _SetWindowClipFlag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowClipFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForegroundWindow
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateWindowEx
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowWindow
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowClipFlag
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HideWindow
</UL>

<P><STRONG><a name="[35b]"></a>_SetWindowPos</STRONG> (Thumb, 818 bytes, Stack size 168 bytes, gui_window.o(i._SetWindowPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = _SetWindowPos &rArr; _HideWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PostPaintMessage
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OffsetRect
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractRectEx
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScreenToClient
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClientToScreen
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowToTop
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindow
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowWindow
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowSize
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowClipFlag
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendMessage_WM_SIZE_AllChild
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendMessage_WM_MOVE_AllChild
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OffsetWindowRect
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertInvRect
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HideWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWindowPos
</UL>

<P><STRONG><a name="[37a]"></a>_SetWindowSize</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, gui_window.o(i._SetWindowSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _SetWindowSize &rArr; InflateRectEx
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflateRectEx
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClientToScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitWindow
</UL>

<P><STRONG><a name="[35c]"></a>_ShowWindow</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gui_window.o(i._ShowWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = _ShowWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowClipFlag
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWindow
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
</UL>

<P><STRONG><a name="[237]"></a>_CursorHide</STRONG> (Thumb, 166 bytes, Stack size 72 bytes, gl_cursor.o(i._CursorHide))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowCursor
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetCursorPos
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_CursorCheck
</UL>

<P><STRONG><a name="[238]"></a>_CursorShow</STRONG> (Thumb, 148 bytes, Stack size 72 bytes, gl_cursor.o(i._CursorShow))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _CursorShow &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowCursor
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetCursorPos
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_CursorFix
</UL>

<P><STRONG><a name="[479]"></a>min_size_aligned</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, x_heap.o(i.min_size_aligned))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_heap_alloc
</UL>

<P><STRONG><a name="[47b]"></a>plug_holes</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, x_heap.o(i.plug_holes))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_heap_free
</UL>

<P><STRONG><a name="[47a]"></a>sizeof_struct_mem</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, x_heap.o(i.sizeof_struct_mem))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_heap_free
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_heap_alloc
</UL>

<P><STRONG><a name="[46a]"></a>vprtf_float_date_analy</STRONG> (Thumb, 216 bytes, Stack size 64 bytes, x_wstring.o(i.vprtf_float_date_analy))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vprtf_float_date_analy &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprtf_ltoa_store
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_wvsprintf
</UL>

<P><STRONG><a name="[46b]"></a>vprtf_ltoa_store</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, x_wstring.o(i.vprtf_ltoa_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vprtf_ltoa_store
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_wvsprintf
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprtf_float_date_analy
</UL>

<P><STRONG><a name="[47e]"></a>vprtf_str_store</STRONG> (Thumb, 168 bytes, Stack size 4 bytes, x_wstring.o(i.vprtf_str_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vprtf_str_store
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_wvsprintf
</UL>

<P><STRONG><a name="[480]"></a>vprtf_wide_get</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, x_wstring.o(i.vprtf_wide_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vprtf_wide_get
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_wvsprintf
</UL>

<P><STRONG><a name="[328]"></a>ABGR2ARGB</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lodepng_app.o(i.ABGR2ARGB))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PNG_Open
</UL>

<P><STRONG><a name="[23b]"></a>_DrawArc</STRONG> (Thumb, 624 bytes, Stack size 112 bytes, gd_arc.o(i._DrawArc))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _DrawArc &rArr; sin &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawArc
</UL>

<P><STRONG><a name="[168]"></a>_FlushLine</STRONG> (Thumb, 416 bytes, Stack size 64 bytes, gui_aa_core.o(i._FlushLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _FlushLine &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPixel
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdHLine
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEnableAlpha
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRGB
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdSetPixelARGB
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_End
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AA_gdHLine
</UL>

<P><STRONG><a name="[114]"></a>_GetARGB</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, surface_argb8888.o(i._GetARGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _GetARGB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> surface_argb8888.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>_GetRGB</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, surface_argb8888.o(i._GetRGB))
<BR>[Address Reference Count : 1]<UL><LI> surface_argb8888.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>_MapARGB</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, surface_argb8888.o(i._MapARGB))
<BR>[Address Reference Count : 1]<UL><LI> surface_argb8888.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>_MapRGB</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, surface_argb8888.o(i._MapRGB))
<BR>[Address Reference Count : 1]<UL><LI> surface_argb8888.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>_MapRGB332</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, surface_argb8888.o(i._MapRGB332))
<BR>[Address Reference Count : 1]<UL><LI> surface_argb8888.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>_MapRGB565</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, surface_argb8888.o(i._MapRGB565))
<BR>[Address Reference Count : 1]<UL><LI> surface_argb8888.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>_MapXRGB1555</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, surface_argb8888.o(i._MapXRGB1555))
<BR>[Address Reference Count : 1]<UL><LI> surface_argb8888.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>_MapXRGB4444</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, surface_argb8888.o(i._MapXRGB4444))
<BR>[Address Reference Count : 1]<UL><LI> surface_argb8888.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>_MapXRGB8888</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, surface_argb8888.o(i._MapXRGB8888))
<BR>[Address Reference Count : 1]<UL><LI> surface_argb8888.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>_ToARGB</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, surface_argb8888.o(i._ToARGB))
<BR>[Address Reference Count : 1]<UL><LI> surface_argb8888.o(.constdata)
</UL>
<P><STRONG><a name="[11e]"></a>_GetARGB</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, surface_rgb332.o(i._GetARGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _GetARGB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> surface_rgb332.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>_GetRGB</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, surface_rgb332.o(i._GetRGB))
<BR>[Address Reference Count : 1]<UL><LI> surface_rgb332.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>_MapARGB</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, surface_rgb332.o(i._MapARGB))
<BR>[Address Reference Count : 1]<UL><LI> surface_rgb332.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>_MapRGB</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, surface_rgb332.o(i._MapRGB))
<BR>[Address Reference Count : 1]<UL><LI> surface_rgb332.o(.constdata)
</UL>
<P><STRONG><a name="[115]"></a>_MapRGB332</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, surface_rgb332.o(i._MapRGB332))
<BR>[Address Reference Count : 1]<UL><LI> surface_rgb332.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>_MapRGB565</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, surface_rgb332.o(i._MapRGB565))
<BR>[Address Reference Count : 1]<UL><LI> surface_rgb332.o(.constdata)
</UL>
<P><STRONG><a name="[117]"></a>_MapXRGB1555</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, surface_rgb332.o(i._MapXRGB1555))
<BR>[Address Reference Count : 1]<UL><LI> surface_rgb332.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>_MapXRGB4444</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, surface_rgb332.o(i._MapXRGB4444))
<BR>[Address Reference Count : 1]<UL><LI> surface_rgb332.o(.constdata)
</UL>
<P><STRONG><a name="[119]"></a>_MapXRGB8888</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, surface_rgb332.o(i._MapXRGB8888))
<BR>[Address Reference Count : 1]<UL><LI> surface_rgb332.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>_ToARGB</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, surface_rgb332.o(i._ToARGB))
<BR>[Address Reference Count : 1]<UL><LI> surface_rgb332.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>_GetARGB</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, surface_rgb565.o(i._GetARGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _GetARGB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> surface_rgb565.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>_GetRGB</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, surface_rgb565.o(i._GetRGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _GetRGB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> surface_rgb565.o(.constdata)
</UL>
<P><STRONG><a name="[126]"></a>_MapARGB</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, surface_rgb565.o(i._MapARGB))
<BR>[Address Reference Count : 1]<UL><LI> surface_rgb565.o(.constdata)
</UL>
<P><STRONG><a name="[125]"></a>_MapRGB</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, surface_rgb565.o(i._MapRGB))
<BR>[Address Reference Count : 1]<UL><LI> surface_rgb565.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>_MapRGB332</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, surface_rgb565.o(i._MapRGB332))
<BR>[Address Reference Count : 1]<UL><LI> surface_rgb565.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>_MapRGB565</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, surface_rgb565.o(i._MapRGB565))
<BR>[Address Reference Count : 1]<UL><LI> surface_rgb565.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>_MapXRGB1555</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, surface_rgb565.o(i._MapXRGB1555))
<BR>[Address Reference Count : 1]<UL><LI> surface_rgb565.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>_MapXRGB4444</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, surface_rgb565.o(i._MapXRGB4444))
<BR>[Address Reference Count : 1]<UL><LI> surface_rgb565.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>_MapXRGB8888</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, surface_rgb565.o(i._MapXRGB8888))
<BR>[Address Reference Count : 1]<UL><LI> surface_rgb565.o(.constdata)
</UL>
<P><STRONG><a name="[124]"></a>_ToARGB</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, surface_rgb565.o(i._ToARGB))
<BR>[Address Reference Count : 1]<UL><LI> surface_rgb565.o(.constdata)
</UL>
<P><STRONG><a name="[132]"></a>_GetARGB</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, surface_xrgb8888.o(i._GetARGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _GetARGB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> surface_xrgb8888.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>_GetRGB</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, surface_xrgb8888.o(i._GetRGB))
<BR>[Address Reference Count : 1]<UL><LI> surface_xrgb8888.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>_MapARGB</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, surface_xrgb8888.o(i._MapARGB))
<BR>[Address Reference Count : 1]<UL><LI> surface_xrgb8888.o(.constdata)
</UL>
<P><STRONG><a name="[12f]"></a>_MapRGB</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, surface_xrgb8888.o(i._MapRGB))
<BR>[Address Reference Count : 1]<UL><LI> surface_xrgb8888.o(.constdata)
</UL>
<P><STRONG><a name="[129]"></a>_MapRGB332</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, surface_xrgb8888.o(i._MapRGB332))
<BR>[Address Reference Count : 1]<UL><LI> surface_xrgb8888.o(.constdata)
</UL>
<P><STRONG><a name="[12a]"></a>_MapRGB565</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, surface_xrgb8888.o(i._MapRGB565))
<BR>[Address Reference Count : 1]<UL><LI> surface_xrgb8888.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>_MapXRGB1555</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, surface_xrgb8888.o(i._MapXRGB1555))
<BR>[Address Reference Count : 1]<UL><LI> surface_xrgb8888.o(.constdata)
</UL>
<P><STRONG><a name="[12c]"></a>_MapXRGB4444</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, surface_xrgb8888.o(i._MapXRGB4444))
<BR>[Address Reference Count : 1]<UL><LI> surface_xrgb8888.o(.constdata)
</UL>
<P><STRONG><a name="[12d]"></a>_MapXRGB8888</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, surface_xrgb8888.o(i._MapXRGB8888))
<BR>[Address Reference Count : 1]<UL><LI> surface_xrgb8888.o(.constdata)
</UL>
<P><STRONG><a name="[12e]"></a>_ToARGB</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, surface_xrgb8888.o(i._ToARGB))
<BR>[Address Reference Count : 1]<UL><LI> surface_xrgb8888.o(.constdata)
</UL>
<P><STRONG><a name="[1cc]"></a>DrawWindowNC</STRONG> (Thumb, 706 bytes, Stack size 80 bytes, gui_face.o(i.DrawWindowNC))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = DrawWindowNC &rArr; DrawRoundRect &rArr; _DrawRoundRectEx &rArr; VLine &rArr; Line &rArr; solid_line &rArr; _FillPolygon &rArr; GUI_AA_End &rArr; _FlushLine &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenToWindow
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowRect
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetForegroundWindow
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRoundRect
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRoundRect
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflateRect
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPenColor
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapXRGB8888
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_window_frame
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextColor
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBrushColor
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapRGB
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AA_DrawBoldLine
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB32_Offset
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCloseBoxRect
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCaptionRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawWindowNC
</UL>

<P><STRONG><a name="[20f]"></a>draw_window_frame</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, gui_face.o(i.draw_window_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = draw_window_frame &rArr; VLine &rArr; Line &rArr; solid_line &rArr; _FillPolygon &rArr; GUI_AA_End &rArr; _FlushLine &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VLine
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLine
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRect
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflateRect
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPenColor
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapXRGB8888
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB32_Offset
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB32_AVG
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
</UL>

<P><STRONG><a name="[225]"></a>__blend_argb</STRONG> (Thumb, 242 bytes, Stack size 56 bytes, gl_mem_16bpp.o(i.__blend_argb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __blend_argb
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_rotate_bitmap
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_draw_bitmap_ARGB8888
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_draw_bitmap_ARGB4444
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_draw_bitmap_AL8
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_draw_bitmap_AL4
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_draw_bitmap_AL2
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_SetPixel_ARGB
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL16_FillRectARGB
</UL>

<P><STRONG><a name="[230]"></a>__blend_argb</STRONG> (Thumb, 242 bytes, Stack size 56 bytes, gl_mem_32bpp.o(i.__blend_argb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __blend_argb
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL32_rotate_bitmap
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL32_draw_bitmap_ARGB8888
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL32_draw_bitmap_ARGB4444
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL32_draw_bitmap_AL8
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL32_draw_bitmap_AL4
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL32_draw_bitmap_AL2
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL32_SetPixel_ARGB
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL32_FillRectARGB
</UL>

<P><STRONG><a name="[169]"></a>Adam7_deinterlace</STRONG> (Thumb, 402 bytes, Stack size 216 bytes, lodepng.o(i.Adam7_deinterlace))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = Adam7_deinterlace &rArr; Adam7_getpassvalues
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBitOfReversedStream0
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitFromReversedStream
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adam7_getpassvalues
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postProcessScanlines
</UL>

<P><STRONG><a name="[16a]"></a>Adam7_getpassvalues</STRONG> (Thumb, 258 bytes, Stack size 36 bytes, lodepng.o(i.Adam7_getpassvalues))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Adam7_getpassvalues
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postProcessScanlines
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adam7_deinterlace
</UL>

<P><STRONG><a name="[2ed]"></a>HuffmanTree_cleanup</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lodepng.o(i.HuffmanTree_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HuffmanTree_cleanup &rArr; lodepng_free &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
</UL>

<P><STRONG><a name="[401]"></a>HuffmanTree_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lodepng.o(i.HuffmanTree_init))
<BR><BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
</UL>

<P><STRONG><a name="[2ef]"></a>HuffmanTree_make2DTree</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, lodepng.o(i.HuffmanTree_make2DTree))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HuffmanTree_make2DTree &rArr; lodepng_malloc &rArr; GUI_VMEM_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths2
</UL>

<P><STRONG><a name="[2f1]"></a>HuffmanTree_makeFromLengths</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lodepng.o(i.HuffmanTree_makeFromLengths))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; uivector_resizev &rArr; uivector_resize &rArr; uivector_reserve &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths2
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateFixedLitLenTree
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateFixedDistanceTree
</UL>

<P><STRONG><a name="[2f2]"></a>HuffmanTree_makeFromLengths2</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, lodepng.o(i.HuffmanTree_makeFromLengths2))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = HuffmanTree_makeFromLengths2 &rArr; uivector_resizev &rArr; uivector_resize &rArr; uivector_reserve &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uivector_resizev
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uivector_init
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uivector_cleanup
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_make2DTree
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths
</UL>

<P><STRONG><a name="[316]"></a>LodePNGIText_cleanup</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lodepng.o(i.LodePNGIText_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LodePNGIText_cleanup &rArr; string_cleanup &rArr; lodepng_free &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_cleanup
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup
</UL>

<P><STRONG><a name="[42d]"></a>LodePNGIText_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lodepng.o(i.LodePNGIText_init))
<BR><BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_init
</UL>

<P><STRONG><a name="[318]"></a>LodePNGText_cleanup</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lodepng.o(i.LodePNGText_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LodePNGText_cleanup &rArr; string_cleanup &rArr; lodepng_free &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_cleanup
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup
</UL>

<P><STRONG><a name="[42c]"></a>LodePNGText_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lodepng.o(i.LodePNGText_init))
<BR><BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_init
</UL>

<P><STRONG><a name="[319]"></a>LodePNGUnknownChunks_cleanup</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lodepng.o(i.LodePNGUnknownChunks_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LodePNGUnknownChunks_cleanup &rArr; lodepng_free &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup
</UL>

<P><STRONG><a name="[42e]"></a>LodePNGUnknownChunks_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lodepng.o(i.LodePNGUnknownChunks_init))
<BR><BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_init
</UL>

<P><STRONG><a name="[45d]"></a>addColorBits</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lodepng.o(i.addColorBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = addColorBits
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgba8ToPixel
</UL>

<P><STRONG><a name="[394]"></a>adler32</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lodepng.o(i.adler32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adler32 &rArr; update_adler32
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_adler32
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_zlib_decompress
</UL>

<P><STRONG><a name="[42f]"></a>checkColorValidity</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, lodepng.o(i.checkColorValidity))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect
</UL>

<P><STRONG><a name="[3a6]"></a>color_tree_add</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, lodepng.o(i.color_tree_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = color_tree_add &rArr; lodepng_malloc &rArr; GUI_VMEM_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_init
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
</UL>

<P><STRONG><a name="[3a8]"></a>color_tree_cleanup</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lodepng.o(i.color_tree_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + In Cycle
<LI>Call Chain = color_tree_cleanup &rArr;  color_tree_cleanup (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_cleanup
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_cleanup
</UL>

<P><STRONG><a name="[45e]"></a>color_tree_get</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, lodepng.o(i.color_tree_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = color_tree_get
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgba8ToPixel
</UL>

<P><STRONG><a name="[3a7]"></a>color_tree_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lodepng.o(i.color_tree_init))
<BR><BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_add
</UL>

<P><STRONG><a name="[3af]"></a>decodeGeneric</STRONG> (Thumb, 1052 bytes, Stack size 96 bytes, lodepng.o(i.decodeGeneric))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = decodeGeneric &rArr; readChunk_iTXt &rArr; zlib_decompress &rArr; lodepng_zlib_decompress &rArr; inflate &rArr; lodepng_inflate &rArr; lodepng_inflatev &rArr; inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; uivector_resizev &rArr; uivector_resize &rArr; uivector_reserve &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_raw_size
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_type_equals
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_next_const
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_length
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_data_const
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_check_crc
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_append
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_ancillary
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zlib_decompress
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_resizev
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_resize
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_reserve
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_init
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_cleanup
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tRNS
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tIME
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tEXt
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_pHYs
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_bKGD
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_PLTE
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postProcessScanlines
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_raw_size_idat
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
</UL>

<P><STRONG><a name="[3fa]"></a>generateFixedDistanceTree</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lodepng.o(i.generateFixedDistanceTree))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = generateFixedDistanceTree &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; uivector_resizev &rArr; uivector_resize &rArr; uivector_reserve &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateFixed
</UL>

<P><STRONG><a name="[3fb]"></a>generateFixedLitLenTree</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lodepng.o(i.generateFixedLitLenTree))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = generateFixedLitLenTree &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; uivector_resizev &rArr; uivector_resize &rArr; uivector_reserve &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateFixed
</UL>

<P><STRONG><a name="[424]"></a>getNumColorChannels</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lodepng.o(i.getNumColorChannels), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_bpp_lct
</UL>

<P><STRONG><a name="[41d]"></a>getPixelColorRGBA16</STRONG> (Thumb, 310 bytes, Stack size 28 bytes, lodepng.o(i.getPixelColorRGBA16))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = getPixelColorRGBA16
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
</UL>

<P><STRONG><a name="[3fc]"></a>getPixelColorRGBA8</STRONG> (Thumb, 570 bytes, Stack size 40 bytes, lodepng.o(i.getPixelColorRGBA8))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = getPixelColorRGBA8 &rArr; readBitsFromReversedStream
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitsFromReversedStream
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
</UL>

<P><STRONG><a name="[3fe]"></a>getPixelColorsRGBA8</STRONG> (Thumb, 782 bytes, Stack size 40 bytes, lodepng.o(i.getPixelColorsRGBA8))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = getPixelColorsRGBA8 &rArr; readBitsFromReversedStream
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitsFromReversedStream
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
</UL>

<P><STRONG><a name="[3ff]"></a>getTreeInflateDynamic</STRONG> (Thumb, 694 bytes, Stack size 88 bytes, lodepng.o(i.getTreeInflateDynamic))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; uivector_resizev &rArr; uivector_resize &rArr; uivector_reserve &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitsFromStream
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huffmanDecodeSymbol
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_init
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_cleanup
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
</UL>

<P><STRONG><a name="[403]"></a>getTreeInflateFixed</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lodepng.o(i.getTreeInflateFixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = getTreeInflateFixed &rArr; generateFixedLitLenTree &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; uivector_resizev &rArr; uivector_resize &rArr; uivector_reserve &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateFixedLitLenTree
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateFixedDistanceTree
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
</UL>

<P><STRONG><a name="[402]"></a>huffmanDecodeSymbol</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, lodepng.o(i.huffmanDecodeSymbol))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = huffmanDecodeSymbol
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
</UL>

<P><STRONG><a name="[40d]"></a>inflate</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lodepng.o(i.inflate))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = inflate &rArr; lodepng_inflate &rArr; lodepng_inflatev &rArr; inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; uivector_resizev &rArr; uivector_resize &rArr; uivector_reserve &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflate
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_zlib_decompress
</UL>

<P><STRONG><a name="[40f]"></a>inflateHuffmanBlock</STRONG> (Thumb, 404 bytes, Stack size 104 bytes, lodepng.o(i.inflateHuffmanBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; uivector_resizev &rArr; uivector_resize &rArr; uivector_reserve &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_resize
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitsFromStream
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huffmanDecodeSymbol
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateFixed
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_init
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_cleanup
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflatev
</UL>

<P><STRONG><a name="[410]"></a>inflateNoCompression</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, lodepng.o(i.inflateNoCompression))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = inflateNoCompression &rArr; ucvector_resize &rArr; ucvector_reserve &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflatev
</UL>

<P><STRONG><a name="[41c]"></a>lodepng_color_mode_equal</STRONG> (Thumb, 164 bytes, Stack size 4 bytes, lodepng.o(i.lodepng_color_mode_equal))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lodepng_color_mode_equal
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
</UL>

<P><STRONG><a name="[423]"></a>lodepng_get_bpp_lct</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lodepng.o(i.lodepng_get_bpp_lct), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNumColorChannels
</UL>

<P><STRONG><a name="[3c2]"></a>lodepng_get_raw_size_idat</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lodepng.o(i.lodepng_get_raw_size_idat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lodepng_get_raw_size_idat
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[427]"></a>lodepng_inflatev</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, lodepng.o(i.lodepng_inflatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = lodepng_inflatev &rArr; inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; uivector_resizev &rArr; uivector_resize &rArr; uivector_reserve &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitFromStream
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateNoCompression
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflate
</UL>

<P><STRONG><a name="[463]"></a>paethPredictor</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, lodepng.o(i.paethPredictor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = paethPredictor
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unfilterScanline
</UL>

<P><STRONG><a name="[3c8]"></a>postProcessScanlines</STRONG> (Thumb, 266 bytes, Stack size 224 bytes, lodepng.o(i.postProcessScanlines))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = postProcessScanlines &rArr; Adam7_deinterlace &rArr; Adam7_getpassvalues
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_bpp
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unfilter
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removePaddingBits
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adam7_getpassvalues
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adam7_deinterlace
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[16b]"></a>readBitFromReversedStream</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lodepng.o(i.readBitFromReversedStream))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removePaddingBits
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitsFromReversedStream
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adam7_deinterlace
</UL>

<P><STRONG><a name="[428]"></a>readBitFromStream</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lodepng.o(i.readBitFromStream))
<BR><BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflatev
</UL>

<P><STRONG><a name="[3fd]"></a>readBitsFromReversedStream</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lodepng.o(i.readBitsFromReversedStream))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readBitsFromReversedStream
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitFromReversedStream
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixelColorsRGBA8
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixelColorRGBA8
</UL>

<P><STRONG><a name="[400]"></a>readBitsFromStream</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, lodepng.o(i.readBitsFromStream))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = readBitsFromStream
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
</UL>

<P><STRONG><a name="[3b6]"></a>readChunk_PLTE</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, lodepng.o(i.readChunk_PLTE))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = readChunk_PLTE &rArr; lodepng_malloc &rArr; GUI_VMEM_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[3b8]"></a>readChunk_bKGD</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, lodepng.o(i.readChunk_bKGD))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[3bb]"></a>readChunk_iTXt</STRONG> (Thumb, 398 bytes, Stack size 72 bytes, lodepng.o(i.readChunk_iTXt))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = readChunk_iTXt &rArr; zlib_decompress &rArr; lodepng_zlib_decompress &rArr; inflate &rArr; lodepng_inflate &rArr; lodepng_inflatev &rArr; inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; uivector_resizev &rArr; uivector_resize &rArr; uivector_reserve &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_itext
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zlib_decompress
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_resize
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_push_back
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_init
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_cleanup
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[3bd]"></a>readChunk_pHYs</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, lodepng.o(i.readChunk_pHYs))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[3b9]"></a>readChunk_tEXt</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, lodepng.o(i.readChunk_tEXt))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = readChunk_tEXt &rArr; lodepng_add_text &rArr; string_set &rArr; string_resize &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[3bc]"></a>readChunk_tIME</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lodepng.o(i.readChunk_tIME))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[3b7]"></a>readChunk_tRNS</STRONG> (Thumb, 142 bytes, Stack size 12 bytes, lodepng.o(i.readChunk_tRNS))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = readChunk_tRNS
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[3ba]"></a>readChunk_zTXt</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, lodepng.o(i.readChunk_zTXt))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = readChunk_zTXt &rArr; zlib_decompress &rArr; lodepng_zlib_decompress &rArr; inflate &rArr; lodepng_inflate &rArr; lodepng_inflatev &rArr; inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; uivector_resizev &rArr; uivector_resize &rArr; uivector_reserve &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zlib_decompress
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_push_back
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_init
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_cleanup
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[43c]"></a>removePaddingBits</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, lodepng.o(i.removePaddingBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = removePaddingBits &rArr; setBitOfReversedStream
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBitOfReversedStream
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitFromReversedStream
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postProcessScanlines
</UL>

<P><STRONG><a name="[41e]"></a>rgba16ToPixel</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, lodepng.o(i.rgba16ToPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rgba16ToPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
</UL>

<P><STRONG><a name="[41f]"></a>rgba8ToPixel</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, lodepng.o(i.rgba8ToPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rgba8ToPixel &rArr; color_tree_get
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_get
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addColorBits
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
</UL>

<P><STRONG><a name="[45c]"></a>setBitOfReversedStream</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, lodepng.o(i.setBitOfReversedStream))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = setBitOfReversedStream
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removePaddingBits
</UL>

<P><STRONG><a name="[16c]"></a>setBitOfReversedStream0</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lodepng.o(i.setBitOfReversedStream0))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adam7_deinterlace
</UL>

<P><STRONG><a name="[317]"></a>string_cleanup</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lodepng.o(i.string_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = string_cleanup &rArr; lodepng_free &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGText_cleanup
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGIText_cleanup
</UL>

<P><STRONG><a name="[413]"></a>string_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lodepng.o(i.string_init))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_itext
</UL>

<P><STRONG><a name="[45f]"></a>string_resize</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lodepng.o(i.string_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = string_resize &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_set
</UL>

<P><STRONG><a name="[414]"></a>string_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lodepng.o(i.string_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = string_set &rArr; string_resize &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_resize
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_itext
</UL>

<P><STRONG><a name="[3c5]"></a>ucvector_cleanup</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lodepng.o(i.ucvector_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ucvector_cleanup &rArr; lodepng_free &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[3b1]"></a>ucvector_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lodepng.o(i.ucvector_init))
<BR><BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[426]"></a>ucvector_init_buffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lodepng.o(i.ucvector_init_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflate
</UL>

<P><STRONG><a name="[45b]"></a>ucvector_push_back</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lodepng.o(i.ucvector_push_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ucvector_push_back &rArr; ucvector_resize &rArr; ucvector_reserve &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt
</UL>

<P><STRONG><a name="[3c3]"></a>ucvector_reserve</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lodepng.o(i.ucvector_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ucvector_reserve &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_resize
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[3b5]"></a>ucvector_resize</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lodepng.o(i.ucvector_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ucvector_resize &rArr; ucvector_reserve &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_reserve
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_resizev
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_push_back
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateNoCompression
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[3c7]"></a>ucvector_resizev</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lodepng.o(i.ucvector_resizev))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ucvector_resizev &rArr; ucvector_resize &rArr; ucvector_reserve &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[2f5]"></a>uivector_cleanup</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lodepng.o(i.uivector_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = uivector_cleanup &rArr; lodepng_free &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths2
</UL>

<P><STRONG><a name="[2f3]"></a>uivector_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lodepng.o(i.uivector_init))
<BR><BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths2
</UL>

<P><STRONG><a name="[460]"></a>uivector_reserve</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lodepng.o(i.uivector_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = uivector_reserve &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uivector_resize
</UL>

<P><STRONG><a name="[461]"></a>uivector_resize</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lodepng.o(i.uivector_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = uivector_resize &rArr; uivector_reserve &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uivector_reserve
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uivector_resizev
</UL>

<P><STRONG><a name="[2f4]"></a>uivector_resizev</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lodepng.o(i.uivector_resizev))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = uivector_resizev &rArr; uivector_resize &rArr; uivector_reserve &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uivector_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths2
</UL>

<P><STRONG><a name="[43b]"></a>unfilter</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, lodepng.o(i.unfilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = unfilter &rArr; unfilterScanline &rArr; paethPredictor
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unfilterScanline
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postProcessScanlines
</UL>

<P><STRONG><a name="[462]"></a>unfilterScanline</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, lodepng.o(i.unfilterScanline))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = unfilterScanline &rArr; paethPredictor
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paethPredictor
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unfilter
</UL>

<P><STRONG><a name="[395]"></a>update_adler32</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, lodepng.o(i.update_adler32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = update_adler32
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adler32
</UL>

<P><STRONG><a name="[3c4]"></a>zlib_decompress</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lodepng.o(i.zlib_decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = zlib_decompress &rArr; lodepng_zlib_decompress &rArr; inflate &rArr; lodepng_inflate &rArr; lodepng_inflatev &rArr; inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; uivector_resizev &rArr; uivector_resize &rArr; uivector_reserve &rArr; lodepng_realloc &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_zlib_decompress
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[3e6]"></a>draw_btn_backgnd</STRONG> (Thumb, 454 bytes, Stack size 56 bytes, widget_button.o(i.draw_btn_backgnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = draw_btn_backgnd &rArr; GradientFillRect &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GradientFillRect
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRect
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflateRect
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPenColor
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapXRGB8888
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffsetRect
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBrushColor
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB32_Offset
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB32_AVG
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushbutton_paint
</UL>

<P><STRONG><a name="[458]"></a>pushbutton_paint</STRONG> (Thumb, 774 bytes, Stack size 72 bytes, widget_button.o(i.pushbutton_paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = pushbutton_paint &rArr; DrawRoundRect &rArr; _DrawRoundRectEx &rArr; VLine &rArr; Line &rArr; solid_line &rArr; _FillPolygon &rArr; GUI_AA_End &rArr; _FlushLine &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParent
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLine
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRoundRect
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRoundRect
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw3DRect
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflateRect
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPenColor
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapXRGB8888
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_btn_backgnd
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffsetRect
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextColor
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBrushColor
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClientRect
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB32_Offset
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB32_AVG
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>

<P><STRONG><a name="[133]"></a>win_proc</STRONG> (Thumb, 1732 bytes, Stack size 136 bytes, widget_button.o(i.win_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = win_proc &rArr; DefWindowProc &rArr; DestroyWindow &rArr;  DestroyWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NotifyParent
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowLong
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindow
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParent
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFocus
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRoundRect
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRoundRect
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRect
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflateRectEx
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflateRect
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPenColor
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapXRGB8888
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFontAveHeight
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFont
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPaint
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginPaint
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillCircle
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AA_FillCircle
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AA_DrawCircle
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushbutton_paint
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawFocusRect
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextColor
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBrushColor
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapRGB
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClientRect
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB32_Offset
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB32_AVG
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWindowLong
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFocus
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_button.o(.constdata)
</UL>
<P><STRONG><a name="[134]"></a>win_proc</STRONG> (Thumb, 512 bytes, Stack size 128 bytes, widget_groupbox.o(i.win_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = win_proc &rArr; DefWindowProc &rArr; DestroyWindow &rArr;  DestroyWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowRect
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowLong
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParent
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPenColor
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapXRGB8888
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRGB
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBrushColor
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextExtent
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPaint
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginPaint
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextOut
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBrushColor
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapRGB
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClientRect
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PolyLine
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB32_Offset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_groupbox.o(.constdata)
</UL>
<P><STRONG><a name="[471]"></a>listbox_find_item</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, widget_listbox.o(i.listbox_find_item))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>

<P><STRONG><a name="[135]"></a>win_proc</STRONG> (Thumb, 2566 bytes, Stack size 152 bytes, widget_listbox.o(i.win_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = win_proc &rArr; DefWindowProc &rArr; DestroyWindow &rArr;  DestroyWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NotifyParent
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowLong
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParent
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_abs
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_wstrlen
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLine
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRoundRect
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRoundRect
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PtInRect
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflateRect
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPenColor
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapXRGB8888
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFontAveHeight
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPaint
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginPaint
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listbox_find_item
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextColor
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBrushColor
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapRGB
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClientRect
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB32_AVG
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_wstrncpy
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_wstr_free
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_wstr_alloc
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWindowLong
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_listbox.o(.constdata)
</UL>
<P><STRONG><a name="[3f8]"></a>fill_pb_rect</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, widget_progressbar.o(i.fill_pb_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = fill_pb_rect &rArr; GradientFillRect &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GradientFillRect
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapXRGB8888
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffsetRect
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBrushColor
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB32_Offset
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
</UL>

<P><STRONG><a name="[434]"></a>on_paint</STRONG> (Thumb, 566 bytes, Stack size 120 bytes, widget_progressbar.o(i.on_paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = on_paint &rArr; DrawTextEx &rArr; DrawRect &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParent
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill3DRect
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRect
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeProgressRect
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflateRect
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPenColor
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapXRGB8888
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_pb_rect
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextColor
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBrushColor
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClientRect
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB32_Offset
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB32_AVG
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>

<P><STRONG><a name="[136]"></a>win_proc</STRONG> (Thumb, 388 bytes, Stack size 104 bytes, widget_progressbar.o(i.win_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = win_proc &rArr; DefWindowProc &rArr; DestroyWindow &rArr;  DestroyWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowLong
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParent
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPaint
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginPaint
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBrushColor
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapRGB
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClientRect
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_progressbar.o(.constdata)
</UL>
<P><STRONG><a name="[3e4]"></a>draw_btn</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, widget_scrollbar.o(i.draw_btn))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = draw_btn &rArr; DrawRoundRect &rArr; _DrawRoundRectEx &rArr; VLine &rArr; Line &rArr; solid_line &rArr; _FillPolygon &rArr; GUI_AA_End &rArr; _FlushLine &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRoundRect
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRoundRect
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPenColor
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapXRGB8888
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBrushColor
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB32_AVG
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
</UL>

<P><STRONG><a name="[3e8]"></a>draw_page</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, widget_scrollbar.o(i.draw_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = draw_page &rArr; gdFillRect &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdFillRect
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapXRGB8888
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB32_AVG
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
</UL>

<P><STRONG><a name="[3e9]"></a>draw_track</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, widget_scrollbar.o(i.draw_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = draw_track &rArr; DrawRoundRect &rArr; _DrawRoundRectEx &rArr; VLine &rArr; Line &rArr; solid_line &rArr; _FillPolygon &rArr; GUI_AA_End &rArr; _FlushLine &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VLine
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLine
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRoundRect
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRoundRect
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPenColor
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapXRGB8888
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBrushColor
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB32_Offset
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB32_AVG
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
</UL>

<P><STRONG><a name="[407]"></a>get_hscroll_rect</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, widget_scrollbar.o(i.get_hscroll_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_hscroll_rect &rArr; make_hscroll_by_value
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflateRect
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_hscroll_by_value
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRect
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
</UL>

<P><STRONG><a name="[409]"></a>get_vscroll_rect</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, widget_scrollbar.o(i.get_vscroll_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_vscroll_rect &rArr; make_vscroll_by_value
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflateRect
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_vscroll_by_value
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRect
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
</UL>

<P><STRONG><a name="[408]"></a>make_hscroll_by_value</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, widget_scrollbar.o(i.make_hscroll_by_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = make_hscroll_by_value
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRectEmpty
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRect
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hscroll_rect
</UL>

<P><STRONG><a name="[40a]"></a>make_vscroll_by_value</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, widget_scrollbar.o(i.make_vscroll_by_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = make_vscroll_by_value
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRectEmpty
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRect
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vscroll_rect
</UL>

<P><STRONG><a name="[436]"></a>on_paint</STRONG> (Thumb, 826 bytes, Stack size 184 bytes, widget_scrollbar.o(i.on_paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = on_paint &rArr; draw_track &rArr; DrawRoundRect &rArr; _DrawRoundRectEx &rArr; VLine &rArr; Line &rArr; solid_line &rArr; _FillPolygon &rArr; GUI_AA_End &rArr; _FlushLine &rArr; gdHLine &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParent
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hBmpArrowUp
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hBmpArrowRight
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hBmpArrowLeft
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hBmpArrowDown
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP_GetInfo
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP_Draw
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vscroll_rect
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hscroll_rect
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_track
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_page
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_btn
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClientRect
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB32_AVG
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_proc
</UL>

<P><STRONG><a name="[137]"></a>win_proc</STRONG> (Thumb, 1734 bytes, Stack size 192 bytes, widget_scrollbar.o(i.win_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = win_proc &rArr; DefWindowProc &rArr; DestroyWindow &rArr;  DestroyWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NotifyParentEx
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowLong
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParent
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_abs
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PtInRect
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPaint
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginPaint
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_paint
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vscroll_rect
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hscroll_rect
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBrushColor
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapRGB
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClientRect
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRect
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCapture
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseCapture
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_scrollbar.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>win_proc</STRONG> (Thumb, 544 bytes, Stack size 112 bytes, widget_textbox.o(i.win_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = win_proc &rArr; DefWindowProc &rArr; DestroyWindow &rArr;  DestroyWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NotifyParent
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowLong
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParent
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFocus
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw3DRect
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflateRect
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPenColor
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapXRGB8888
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPaint
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginPaint
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawFocusRect
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextColor
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBrushColor
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapRGB
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClientRect
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB32_AVG
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_textbox.o(.constdata)
</UL>
<P><STRONG><a name="[164]"></a>_Wu_DrawCircle</STRONG> (Thumb, 320 bytes, Stack size 72 bytes, gd_circle.o(i._Wu_DrawCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = _Wu_DrawCircle &rArr; draw_circle_pixel &rArr; gdSetPixelARGB &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_circle_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AA_FillCircle
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AA_DrawCircle
</UL>

<P><STRONG><a name="[382]"></a>draw_circle_pixel</STRONG> (Thumb, 340 bytes, Stack size 88 bytes, gd_circle.o(i.draw_circle_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = draw_circle_pixel &rArr; gdSetPixelARGB &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRGB
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdSetPixelARGB
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawCircle
</UL>

<P><STRONG><a name="[9a]"></a>__mem_get_data</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gui_imagebmp.o(i.__mem_get_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mem_get_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_imagebmp.o(i.BMP_Draw)
</UL>
<P><STRONG><a name="[385]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[393]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[392]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f4]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
